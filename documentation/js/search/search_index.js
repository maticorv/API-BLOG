var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.367,1,2.75]],["body/controllers/AppController.html",[0,2.161,1,4.347,2,1.704,3,0.194,4,0.172,5,0.172,6,4.174,7,0.671,8,1.906,9,6.114,10,1.443,11,0.016,12,4.822,13,0.806,14,4.822,15,1.443,16,1.267,17,0.535,18,0.918,19,4.124,20,4.174,21,2.983,22,4.822,23,0.194,24,0.219,25,2.479,26,2.033,27,1.385,28,4.822,29,0.012,30,0.012]],["title/modules/AppModule.html",[31,1.31,32,2.75]],["body/modules/AppModule.html",[1,3.692,2,1.543,3,0.119,4,0.106,5,0.106,11,0.016,17,0.584,18,0.563,19,3.934,20,2.559,23,0.119,24,0.134,29,0.009,30,0.009,31,1.479,32,5.486,33,1.306,34,2.026,35,2.559,36,2.559,37,2.559,38,4.216,39,4.216,40,4.216,41,4.216,42,3.693,43,4.216,44,4.216,45,3.693,46,2.246,47,1.52,48,1.52,49,2.956,50,2.373,51,2.373,52,2.956,53,2.559,54,2.101,55,1.52,56,2.956,57,2.956,58,2.956,59,2.956,60,2.956,61,2.956,62,2.956,63,2.956,64,0.96,65,1.945,66,2.956,67,2.956,68,2.956,69,2.956,70,2.956,71,2.956,72,2.956,73,5.737,74,2.956,75,2.956,76,2.956,77,2.956,78,2.956,79,2.956,80,2.956,81,2.956,82,2.956,83,2.956,84,2.559,85,2.956,86,2.956]],["title/injectables/AppService.html",[19,2.375,87,0.835]],["body/injectables/AppService.html",[3,0.21,4,0.186,5,0.186,7,0.726,8,2.003,9,6.289,11,0.015,13,0.873,15,1.562,16,1.331,17,0.416,18,0.994,19,3.946,23,0.21,24,0.237,27,1.499,29,0.013,30,0.013,87,1.388,88,2.011,89,4.518,90,5.22,91,5.22,92,5.22]],["title/classes/Auth.html",[24,0.175,93,2.375]],["body/classes/Auth.html",[3,0.237,4,0.211,5,0.211,11,0.014,23,0.237,24,0.267,29,0.014,30,0.014,93,4.246,94,1.561,95,5.104]],["title/controllers/AuthController.html",[0,1.367,96,2.75]],["body/controllers/AuthController.html",[0,1.045,2,1.045,3,0.119,4,0.106,5,0.106,7,0.411,8,1.361,10,1.307,11,0.016,13,0.73,15,1.307,16,1.327,17,0.542,18,0.563,21,2.534,23,0.119,24,0.134,25,1.52,26,1.246,27,1.904,29,0.009,30,0.009,93,1.815,96,3.104,97,2.559,98,1.704,99,4.496,100,3.78,101,2.559,102,4.216,103,4.028,104,2.956,105,2.956,106,1.543,107,1.156,108,0.868,109,1.361,110,3.523,111,2.559,112,4.339,113,2.956,114,2.956,115,1.683,116,2.994,117,4.367,118,1.704,119,0.921,120,0.96,121,1.606,122,2.994,123,2.297,124,1.306,125,3.393,126,2.559,127,4.367,128,2.559,129,2.559,130,2.101,131,2.956,132,2.956,133,2.956,134,2.956,135,2.956,136,2.956,137,2.956,138,1.945,139,2.956,140,1.246,141,2.956,142,1.704,143,1.704,144,1.835,145,2.956,146,1.704,147,1.945,148,3.418,149,2.956,150,1.704,151,1.704,152,2.956]],["title/modules/AuthModule.html",[31,1.31,38,2.545]],["body/modules/AuthModule.html",[2,1.654,3,0.131,4,0.116,5,0.116,11,0.016,17,0.589,18,0.619,23,0.131,24,0.147,29,0.009,30,0.009,31,1.586,33,1.437,34,2.172,38,4.945,42,3.818,45,3.818,46,2.407,47,1.672,48,1.672,50,2.544,51,2.981,54,3.9,55,1.672,96,3.9,122,3.818,123,2.526,153,2.814,154,3.252,155,2.814,156,4.359,157,4.359,158,3.252,159,3.252,160,2.814,161,3.685,162,2.814,163,2.14,164,4.682,165,1.997,166,3.252,167,3.252,168,4.682,169,2.526,170,3.328,171,3.252,172,3.252,173,2.814,174,3.252,175,2.814,176,2.814,177,1.586,178,2.814,179,2.814,180,3.252,181,2.814,182,3.252,183,3.252,184,3.252,185,3.252]],["title/injectables/AuthService.html",[87,0.835,122,2.229]],["body/injectables/AuthService.html",[3,0.066,4,0.058,5,0.058,7,0.228,8,0.854,11,0.016,13,0.767,15,1.485,16,1.359,17,0.457,18,0.312,23,0.066,24,0.074,26,1.74,27,1.649,29,0.005,30,0.005,64,1.491,87,0.591,88,0.631,93,2.819,99,3.055,100,2.37,101,1.417,102,3.467,103,3.635,106,1.622,107,1.215,108,0.767,109,1.431,110,3.048,111,2.37,112,3.235,120,1.712,121,0.89,122,1.578,124,0.724,125,2.128,126,1.417,140,0.69,144,1.247,148,1.802,163,1.077,177,3.038,186,1.417,187,2.738,188,3.12,189,3.53,190,1.27,191,1.417,192,2.552,193,3.12,194,4.969,195,1.638,196,1.638,197,1.638,198,2.738,199,3.571,200,1.638,201,1.638,202,4.296,203,1.638,204,3.53,205,1.638,206,2.738,207,1.272,208,1.272,209,2.128,210,1.682,211,1.417,212,1.272,213,1.417,214,1.638,215,0.944,216,3.086,217,2.84,218,1.638,219,1.164,220,2.37,221,2.738,222,1.638,223,2.378,224,1.638,225,1.638,226,2.37,227,2.37,228,1.638,229,1.638,230,1.638,231,1.638,232,1.638,233,2.242,234,2.302,235,1.638,236,1.417,237,1.638,238,2.738,239,0.842,240,1.638,241,1.638,242,3.055,243,1.272,244,1.077,245,1.638,246,1.638,247,2.37,248,2.738,249,1.638,250,2.738,251,1.638,252,2.738,253,1.638,254,1.638,255,1.638,256,1.638,257,1.638,258,1.638,259,1.638,260,1.947,261,1.417,262,1.638,263,1.638,264,1.638,265,2.738,266,1.638,267,1.638,268,2.37,269,1.638,270,1.638,271,1.638,272,1.417,273,1.638,274,1.638,275,2.37,276,1.638,277,1.638,278,1.638,279,1.638,280,1.638,281,1.638,282,1.638,283,1.638,284,1.638,285,1.638,286,1.638,287,1.272,288,1.638,289,1.417,290,1.638,291,1.417,292,1.417,293,1.272,294,1.638,295,1.638,296,1.638,297,1.638,298,1.638,299,1.417,300,1.638,301,2.738,302,1.638,303,1.638,304,1.638,305,1.272,306,2.738,307,1.417,308,1.638,309,3.263,310,1.164,311,0.76,312,1.637,313,0.76,314,1.164,315,0.76,316,1.164]],["title/controllers/CategoriesController.html",[0,1.367,317,2.75]],["body/controllers/CategoriesController.html",[0,1.016,2,1.016,3,0.116,4,0.103,5,0.103,7,0.4,8,1.333,10,1.81,11,0.016,13,1.011,15,1.897,16,1.428,17,0.505,18,0.547,23,0.116,24,0.13,25,1.478,26,1.212,27,1.737,29,0.008,30,0.008,98,1.656,106,2,107,1.498,108,0.946,109,1.764,110,3.475,115,1.968,116,2.465,118,1.656,119,0.896,124,1.27,138,1.891,140,2.386,142,2.465,143,1.656,144,2.241,146,2.465,150,2.465,151,1.656,311,1.333,313,1.333,315,1.333,317,3.04,318,2.487,319,4.7,320,1.511,321,2.324,322,2.324,323,2.627,324,2.487,325,3.894,326,2.874,327,2.874,328,2.874,329,3.702,330,3.702,331,3.323,332,3.702,333,2.874,334,2.874,335,4.441,336,2.874,337,1.765,338,1.656,339,1.765,340,2.874,341,2.487,342,3.323,343,3.137,344,2.487,345,3.323,346,1.402,347,1.656,348,2.233,349,2.874,350,2.874,351,2.874,352,2.874,353,2.874,354,2.874,355,2.487,356,2.874,357,2.874]],["title/modules/CategoriesModule.html",[31,1.31,39,2.545]],["body/modules/CategoriesModule.html",[2,2.067,3,0.181,4,0.161,5,0.161,11,0.016,17,0.568,18,0.857,23,0.181,24,0.204,29,0.012,30,0.012,31,1.981,33,1.988,34,2.713,39,4.812,46,3.007,47,2.313,48,2.313,50,3.178,51,2.444,317,4.62,343,4.49,344,3.893,347,2.593,348,3.495,358,3.893,359,3.893,360,4.498,361,4.498,362,4.498,363,3.197,364,2.444,365,4.498,366,4.498,367,4.498,368,4.498,369,4.498,370,4.498]],["title/injectables/CategoriesService.html",[87,0.835,343,2.375]],["body/injectables/CategoriesService.html",[3,0.093,4,0.083,5,0.083,7,0.322,8,1.129,11,0.016,13,0.918,15,1.742,17,0.464,18,0.44,23,0.093,24,0.105,27,1.577,29,0.007,30,0.007,87,0.782,88,0.891,106,1.786,107,1.339,108,0.845,109,1.576,110,3.104,115,2.115,124,1.022,140,2.132,144,2.56,177,3.472,188,1.257,190,1.073,216,2.701,217,3.129,233,2.427,234,2.072,311,1.681,312,3.005,313,1.681,315,1.681,319,3.928,320,1.28,321,1.969,322,1.969,323,1.863,324,3.136,325,3.371,329,4.376,330,3.136,331,4.524,332,3.136,335,4.005,338,1.333,343,2.225,345,2.815,346,1.128,347,3.733,348,1.797,364,1.257,371,2.002,372,2.313,373,2.743,374,2.313,375,2.313,376,2.313,377,3.623,378,1.797,379,4.265,380,2.313,381,3.471,382,1.797,383,2.576,384,1.333,385,2.313,386,2.313,387,2.313,388,3.623,389,2.313,390,2.313,391,3.612,392,2.313,393,1.797,394,1.797,395,3.866,396,2.313,397,2.313,398,2.313,399,2.313,400,2.313,401,3.623,402,2.313,403,1.797,404,2.313,405,1.797]],["title/entities/Category.html",[347,2.229,406,2.229]],["body/entities/Category.html",[3,0.171,4,0.152,5,0.152,7,0.591,10,1.89,11,0.015,13,1.056,16,1.167,17,0.449,21,3.681,23,0.171,24,0.192,29,0.011,30,0.011,107,1.673,108,1.056,115,2.829,144,2.233,239,2.183,312,2.612,347,3.642,384,2.448,391,4.158,406,3.246,407,2.794,408,3.675,409,1.908,410,4.91,411,4.246,412,4.91,413,4.246,414,3.675,415,5.632,416,4.246,417,3.675,418,4.874]],["title/classes/ConfirmEmailDto.html",[24,0.175,419,2.75]],["body/classes/ConfirmEmailDto.html",[3,0.205,4,0.182,5,0.182,7,0.71,10,1.527,11,0.015,13,0.853,16,1.313,17,0.407,23,0.255,24,0.287,29,0.012,30,0.012,94,1.351,108,0.853,239,2.624,409,2.147,419,4.9,420,3.444,421,4.417,422,5.966,423,5.103,424,5.103,425,3.258,426,3.444,427,2.367]],["title/classes/CreateAuthDto.html",[24,0.175,112,2.375]],["body/classes/CreateAuthDto.html",[3,0.145,4,0.129,5,0.129,7,0.501,10,1.736,11,0.015,13,0.97,16,1.419,17,0.401,23,0.145,24,0.228,29,0.01,30,0.01,64,1.885,94,0.954,107,1.537,108,0.97,112,3.091,119,1.123,223,3.345,409,1.705,425,3.231,426,3.415,427,1.671,428,5.439,429,2.56,430,2.798,431,3.601,432,2.211,433,3.601,434,3.117,435,3.911,436,3.911,437,3.911,438,4.357,439,4.357,440,4.357,441,5.929,442,5.929,443,5.929,444,5.439,445,4.357,446,4.357,447,4.357,448,4.357,449,4.357,450,4.357,451,3.601,452,3.911,453,2.798,454,2.798,455,2.798,456,3.117,457,3.601,458,3.415,459,2.798,460,3.117,461,2.798]],["title/classes/CreateCategoryDto.html",[24,0.175,325,2.375]],["body/classes/CreateCategoryDto.html",[3,0.203,4,0.18,5,0.18,7,0.7,10,1.507,11,0.015,13,0.842,16,1.302,17,0.501,23,0.203,24,0.285,29,0.012,30,0.012,94,1.333,107,1.814,108,0.842,119,1.57,325,3.859,409,2.129,425,3.231,426,3.415,427,2.336,432,3.092,458,3.415,462,5.44,463,3.913,464,5.036]],["title/classes/CreateEmailConfirmationDto.html",[24,0.175,465,2.545]],["body/classes/CreateEmailConfirmationDto.html",[3,0.234,4,0.207,5,0.207,11,0.014,23,0.234,24,0.263,29,0.014,30,0.014,64,1.886,94,1.537,420,3.155,465,4.509,466,5.026,467,4.511]],["title/classes/CreateEmailDto.html",[24,0.175,468,2.375]],["body/classes/CreateEmailDto.html",[3,0.236,4,0.209,5,0.209,11,0.014,23,0.236,24,0.266,29,0.014,30,0.014,94,1.553,468,4.233,469,5.077,470,4.558]],["title/classes/CreateHealthDto.html",[24,0.175,471,2.375]],["body/classes/CreateHealthDto.html",[3,0.236,4,0.209,5,0.209,11,0.014,23,0.236,24,0.266,29,0.014,30,0.014,94,1.553,471,4.233,472,5.077,473,4.558]],["title/classes/CreatePostDto.html",[24,0.175,474,2.375]],["body/classes/CreatePostDto.html",[3,0.175,4,0.155,5,0.155,7,0.604,10,1.71,11,0.015,13,1.068,16,1.406,17,0.509,23,0.175,24,0.259,29,0.011,30,0.011,94,1.15,108,1.068,119,1.354,120,2.076,121,2.36,409,1.936,425,2.939,426,3.472,427,2.015,432,2.667,458,3.472,474,3.51,475,5.877,476,3.375,477,4.205,478,4.965,479,4.542,480,3.76,481,3.76,482,2.939,483,4.344,484,4.344,485,4.948,486,4.948,487,3.76]],["title/classes/CreateUserDto.html",[24,0.175,488,2.375]],["body/classes/CreateUserDto.html",[3,0.163,4,0.145,5,0.145,7,0.563,10,1.846,11,0.015,13,1.032,16,1.471,17,0.435,23,0.22,24,0.247,29,0.011,30,0.011,64,2.005,94,1.072,107,1.634,108,1.032,119,1.262,223,3.972,239,2.082,409,1.848,425,3.395,426,3.588,427,1.879,430,3.147,432,2.487,435,4.239,436,4.239,437,4.239,452,4.239,453,3.147,454,3.147,455,3.147,458,3.588,459,3.147,461,3.147,488,3.789,489,5.715,490,3.147,491,4.05,492,4.05,493,4.05,494,5.456,495,4.05,496,4.05]],["title/modules/DatabaseModule.html",[31,1.31,40,2.545]],["body/modules/DatabaseModule.html",[3,0.162,4,0.144,5,0.144,11,0.016,17,0.49,18,0.766,23,0.162,24,0.182,29,0.011,30,0.011,31,1.839,33,1.777,40,3.573,51,2.951,54,3.86,55,2.068,84,3.481,108,0.672,161,4.042,175,3.481,176,3.481,223,2.318,331,3.125,363,2.858,364,2.185,407,2.646,482,3.161,497,4.021,498,4.021,499,4.021,500,3.481,501,4.021,502,4.021,503,4.021,504,4.021,505,4.021,506,4.021,507,4.021,508,4.021,509,4.021,510,4.021,511,4.777,512,4.021,513,4.021,514,4.021,515,3.481,516,4.021,517,4.021,518,4.021,519,4.021,520,4.021,521,4.021,522,4.021,523,4.021,524,4.021,525,4.021,526,4.021,527,4.021,528,4.021,529,4.021,530,4.021,531,4.021,532,4.021,533,4.021,534,4.021,535,4.021,536,4.021,537,4.021,538,4.021,539,4.021,540,4.021]],["title/classes/Email.html",[24,0.175,64,1.257]],["body/classes/Email.html",[3,0.237,4,0.211,5,0.211,11,0.014,23,0.237,24,0.267,29,0.014,30,0.014,64,2.246,94,1.561,541,5.104]],["title/classes/EmailConfirmation.html",[24,0.175,542,2.75]],["body/classes/EmailConfirmation.html",[3,0.235,4,0.208,5,0.208,11,0.014,23,0.235,24,0.264,29,0.014,30,0.014,94,1.545,420,3.171,542,4.886,543,5.051,544,5.051]],["title/controllers/EmailConfirmationsController.html",[0,1.367,545,2.75]],["body/controllers/EmailConfirmationsController.html",[0,1.042,2,1.042,3,0.119,4,0.105,5,0.105,7,0.41,8,1.359,10,1.304,11,0.016,13,0.729,15,1.304,16,1.074,17,0.51,18,0.561,21,2.53,23,0.119,24,0.134,26,1.243,27,1.646,29,0.009,30,0.009,64,1.861,65,3.413,98,1.699,106,1.54,107,1.154,108,0.493,109,1.359,115,1.136,116,2.512,118,1.699,119,0.919,120,2.079,121,1.602,130,2.096,140,1.243,142,1.699,143,1.699,144,2.025,146,1.699,150,1.699,151,1.699,177,3.122,188,1.602,190,1.368,215,2.989,216,1.368,217,2.667,320,1.54,323,1.516,337,1.81,338,1.699,339,1.81,355,2.552,420,2.818,545,3.099,546,2.552,547,5.186,548,3.773,549,2.948,550,2.948,551,2.948,552,4.452,553,2.552,554,4.359,555,3.387,556,2.948,557,2.948,558,2.552,559,2.096,560,2.096,561,2.552,562,2.948,563,2.948,564,2.948,565,2.948,566,2.948,567,2.948,568,2.948,569,2.948,570,2.948,571,2.948,572,2.948,573,2.948,574,2.948,575,2.948,576,2.948,577,2.948,578,3.413,579,2.948,580,2.948]],["title/modules/EmailConfirmationsModule.html",[31,1.31,41,2.545]],["body/modules/EmailConfirmationsModule.html",[2,1.937,3,0.164,4,0.146,5,0.146,11,0.016,17,0.579,18,0.777,23,0.164,24,0.185,29,0.011,30,0.011,31,1.857,33,1.803,34,2.543,41,4.978,42,4.101,45,4.101,46,2.819,47,2.097,48,2.097,50,2.979,51,2.979,54,3.897,55,2.097,64,1.781,65,2.684,160,3.531,162,3.531,163,2.684,173,3.531,215,4.101,420,2.217,545,4.402,558,3.531,581,3.531,582,4.079,583,3.531,584,4.079,585,4.079,586,4.079]],["title/injectables/EmailConfirmationsService.html",[87,0.835,215,2.229]],["body/injectables/EmailConfirmationsService.html",[3,0.078,4,0.069,5,0.069,7,0.268,8,0.976,11,0.016,13,0.898,15,1.693,16,1.112,17,0.499,18,0.367,21,1.929,23,0.078,24,0.087,26,1.921,27,1.625,29,0.006,30,0.006,55,0.99,64,1.98,65,3.723,87,0.676,88,0.742,106,1.897,107,1.422,108,0.898,109,1.674,120,1.744,121,1.046,124,0.851,140,0.812,144,1.397,161,3.474,163,1.267,177,3.335,178,2.709,181,1.667,188,2.475,190,1.452,192,2.909,193,3.075,194,4.647,208,1.496,210,1.922,212,1.496,213,1.667,215,1.804,216,2.491,217,2.761,220,1.667,226,1.667,227,1.667,233,2.723,234,2.491,236,2.709,244,2.997,260,2.225,268,1.667,292,1.667,293,1.496,299,1.667,305,1.496,309,3.562,310,1.369,311,0.893,312,1.834,313,0.893,314,1.369,315,0.893,316,1.369,320,1.106,346,0.939,373,2.428,419,3.562,420,3.075,422,3.423,465,3.297,542,3.238,548,2.709,553,2.709,555,3.073,578,2.602,587,1.667,588,3.13,589,3.13,590,3.13,591,1.926,592,1.926,593,3.13,594,1.926,595,3.13,596,1.926,597,3.13,598,1.926,599,1.926,600,3.13,601,1.926,602,2.709,603,1.369,604,1.926,605,2.709,606,1.926,607,3.13,608,1.926,609,1.926,610,1.926,611,1.926,612,1.926,613,3.955,614,1.926,615,1.926,616,3.13,617,3.13,618,1.926,619,1.926,620,1.926,621,3.13,622,1.926,623,1.926,624,1.926,625,1.926,626,1.926,627,1.926,628,1.926,629,1.667,630,1.926]],["title/controllers/EmailsController.html",[0,1.367,631,2.75]],["body/controllers/EmailsController.html",[0,1.099,2,1.099,3,0.125,4,0.111,5,0.111,7,0.432,8,1.413,10,1.869,11,0.016,13,1.045,15,1.869,16,1.458,17,0.498,18,0.592,23,0.125,24,0.141,25,1.599,26,1.311,27,1.795,29,0.009,30,0.009,98,1.792,106,2.077,107,1.556,108,0.983,109,1.832,115,2.061,116,2.613,118,1.792,119,0.969,124,1.374,138,2.046,140,2.478,142,2.613,143,1.792,144,2.305,146,2.613,147,2.046,150,2.613,151,1.792,193,2.907,311,1.442,313,1.442,315,1.442,320,1.602,321,2.463,322,2.463,323,2.33,337,1.909,338,1.792,339,1.909,342,3.522,346,1.517,468,4.005,631,3.222,632,2.691,633,3.109,634,2.691,635,3.109,636,3.109,637,3.109,638,3.109,639,4.542,640,3.109,641,2.691,642,3.522,643,3.109,644,3.109,645,3.109,646,3.109,647,3.109,648,3.109,649,3.109]],["title/modules/EmailsModule.html",[31,1.31,42,2.229]],["body/modules/EmailsModule.html",[2,2.077,3,0.182,4,0.162,5,0.162,11,0.016,17,0.55,18,0.863,23,0.182,24,0.205,29,0.012,30,0.012,31,1.991,33,2.004,34,2.727,42,4.299,46,3.023,47,2.331,48,2.331,50,3.195,55,2.331,161,3.61,193,4.244,631,4.637,641,3.924,650,3.924,651,3.924,652,3.924,653,4.534,654,5.088,655,4.534]],["title/injectables/EmailsService.html",[87,0.835,193,2.102]],["body/injectables/EmailsService.html",[3,0.106,4,0.094,5,0.094,7,0.365,8,1.244,11,0.016,13,1.097,15,1.905,16,1.119,17,0.488,18,0.499,23,0.106,24,0.119,25,1.348,26,1.106,27,1.759,29,0.008,30,0.008,55,1.348,64,1.99,87,0.862,88,1.01,93,1.61,106,2.164,107,1.622,108,1.065,109,1.909,120,0.852,124,1.159,140,2.278,144,2.164,161,3.761,177,2.358,190,1.216,193,2.169,199,2.27,217,1.348,234,1.216,260,1.864,261,2.27,291,2.27,293,2.037,309,3.841,310,1.864,311,1.852,312,3.119,313,1.852,314,1.864,315,1.852,316,1.864,320,1.411,321,2.169,322,2.169,323,2.053,346,1.279,373,1.61,409,1.352,468,3.57,500,2.27,555,2.037,634,3.455,639,4.19,642,3.102,656,2.27,657,4.834,658,3.992,659,2.622,660,3.992,661,2.622,662,2.622,663,2.622,664,2.622,665,3.992,666,4.834,667,2.622,668,2.622,669,2.622,670,4.834,671,2.622,672,3.992,673,2.27,674,2.622,675,2.622,676,2.622,677,2.622,678,4.834,679,2.622,680,2.622,681,2.622,682,2.622,683,2.622,684,2.622,685,3.455,686,2.622]],["title/classes/Health.html",[24,0.175,687,2.545]],["body/classes/Health.html",[3,0.237,4,0.211,5,0.211,11,0.014,23,0.237,24,0.267,29,0.014,30,0.014,94,1.561,687,4.55,688,5.104]],["title/controllers/HealthController.html",[0,1.367,689,2.75]],["body/controllers/HealthController.html",[0,1.078,2,1.078,3,0.123,4,0.109,5,0.109,7,0.424,8,1.393,10,0.913,11,0.016,13,0.51,15,0.913,16,1.096,17,0.464,18,0.581,21,2.181,23,0.123,24,0.138,26,1.287,27,1.781,29,0.009,30,0.009,98,1.759,115,1.722,116,2.577,118,1.759,119,0.951,130,2.169,138,2.008,142,1.759,143,1.759,144,1.87,146,1.759,147,2.008,150,1.759,151,1.759,188,3.166,190,1.415,337,1.873,338,1.759,339,1.873,471,2.745,687,2.942,689,3.178,690,2.641,691,5.825,692,3.051,693,3.051,694,5.291,695,4.47,696,4.47,697,5.291,698,5.291,699,2.371,700,3.051,701,3.051,702,1.873,703,3.051,704,3.051,705,3.051,706,4.47,707,3.051,708,3.869,709,4.47,710,4.47,711,3.051,712,3.051,713,4.47,714,5.825,715,4.47,716,3.051,717,3.051,718,3.051,719,3.051,720,3.051,721,3.051,722,3.051,723,2.641,724,3.051,725,3.051,726,3.051,727,3.051,728,3.051,729,3.051,730,3.481,731,3.051,732,3.051]],["title/modules/HealthModule.html",[31,1.31,43,2.545]],["body/modules/HealthModule.html",[2,2.132,3,0.19,4,0.169,5,0.169,11,0.016,17,0.558,18,0.899,23,0.19,24,0.214,29,0.012,30,0.012,31,2.044,33,2.087,34,2.799,43,4.874,46,3.103,47,2.428,48,2.428,50,3.28,51,2.566,689,4.728,699,3.669,702,4.549,733,4.087,734,4.087,735,4.722,736,4.722,737,4.722,738,6.035]],["title/injectables/HealthService.html",[87,0.835,702,2.375]],["body/injectables/HealthService.html",[3,0.168,4,0.149,5,0.149,11,0.016,15,1.668,17,0.5,18,0.797,23,0.168,24,0.19,27,2.001,29,0.011,30,0.011,87,1.204,88,1.612,124,1.849,140,1.764,144,2.216,234,1.941,309,4.953,310,2.974,311,1.941,312,2.91,313,1.941,314,2.974,315,1.941,316,2.974,346,2.041,471,3.424,687,4.585,702,3.424,730,4.127,739,3.621,740,4.827,741,4.184]],["title/injectables/JwtAuthGuard.html",[87,0.835,170,2.75]],["body/injectables/JwtAuthGuard.html",[3,0.166,4,0.147,5,0.147,7,0.573,8,1.721,11,0.016,13,0.923,15,1.234,17,0.53,18,0.785,23,0.166,24,0.187,25,2.12,27,1.586,29,0.011,30,0.011,87,1.192,88,1.589,106,1.951,107,1.462,108,0.923,109,1.721,130,2.931,165,2.532,169,3.204,170,3.925,190,1.913,216,1.913,482,2.12,742,5.389,743,3.204,744,5.522,745,4.123,746,7.137,747,4.123,748,5.522,749,5.756,750,4.123,751,4.123,752,3.569,753,3.204,754,1.913,755,4.123,756,3.204,757,4.78,758,4.123,759,4.123,760,4.123,761,4.123]],["title/injectables/JwtStrategy.html",[87,0.835,156,2.545]],["body/injectables/JwtStrategy.html",[3,0.142,4,0.126,5,0.126,7,0.492,8,1.549,11,0.016,13,0.831,15,1.057,17,0.557,18,0.673,23,0.142,24,0.16,26,1.49,27,1.015,29,0.01,30,0.01,55,1.817,64,1.148,87,1.073,88,1.362,106,1.755,107,1.315,108,0.831,109,1.549,110,3.051,120,1.866,156,3.269,161,4.295,165,2.17,177,2.802,179,3.059,188,2.7,190,2.304,191,3.059,192,3.501,207,3.86,208,2.746,210,3.827,211,4.3,212,2.746,216,2.304,217,1.817,233,1.921,234,1.639,244,3.78,305,2.746,511,2.746,754,1.639,756,2.746,762,3.059,763,4.3,764,3.534,765,4.968,766,3.534,767,3.059,768,3.534,769,3.059,770,2.746,771,4.3,772,2.512,773,3.534,774,3.059,775,3.534,776,3.534,777,3.534,778,3.534]],["title/injectables/LocalAuthGuard.html",[87,0.835,779,3.005]],["body/injectables/LocalAuthGuard.html",[3,0.221,4,0.196,5,0.196,11,0.015,17,0.528,18,1.047,23,0.221,24,0.249,29,0.013,30,0.013,87,1.432,88,2.118,165,3.376,743,4.272,752,4.759,754,2.55,779,5.153,780,4.759,781,5.498]],["title/injectables/LocalStrategy.html",[87,0.835,157,2.545]],["body/injectables/LocalStrategy.html",[3,0.161,4,0.143,5,0.143,7,0.555,8,1.685,11,0.016,13,0.904,15,1.195,16,1.464,17,0.523,18,0.76,23,0.161,24,0.181,25,2.053,26,1.684,27,1.147,29,0.011,30,0.011,64,1.297,87,1.167,88,1.539,106,1.91,107,1.431,108,0.904,109,1.685,110,3.319,120,1.99,122,4.075,123,3.103,157,3.556,165,2.452,177,2.988,190,1.852,207,4.199,216,1.852,217,2.053,223,3.784,233,2.17,234,1.852,754,1.852,756,3.103,763,4.678,767,3.456,769,3.456,770,3.103,774,3.456,782,3.456,783,3.993,784,3.993,785,5.404,786,3.993,787,3.456,788,3.993]],["title/classes/LoginAuthDto.html",[24,0.175,102,2.545]],["body/classes/LoginAuthDto.html",[3,0.154,4,0.136,5,0.136,7,0.531,10,1.568,11,0.015,13,0.876,16,1.335,17,0.418,23,0.154,24,0.238,29,0.01,30,0.01,64,1.945,94,1.011,102,3.45,108,0.876,119,1.19,223,3.45,409,1.776,425,3.078,426,3.253,427,1.771,429,2.715,430,2.967,434,3.305,435,4.073,436,4.073,437,4.073,438,4.538,439,4.538,440,4.538,441,6.038,442,6.038,443,6.038,444,5.577,445,4.538,446,4.538,447,4.538,448,4.538,449,4.538,450,4.538,452,4.073,453,2.967,454,2.967,455,2.967,458,3.253,459,2.967,460,3.305,461,2.967,789,5.181,790,3.819,791,3.819]],["title/classes/PaginationParams.html",[24,0.175,792,2.75]],["body/classes/PaginationParams.html",[3,0.169,4,0.15,5,0.15,7,0.584,10,1.88,11,0.016,13,1.051,17,0.445,23,0.169,24,0.285,29,0.011,30,0.011,94,1.112,108,1.224,109,2.236,312,3.493,409,1.894,427,1.948,792,3.974,793,3.635,794,4.882,795,4.882,796,5.439,797,5.59,798,4.199,799,4.199,800,4.199,801,4.199,802,6.7,803,4.199,804,6.7,805,3.263,806,5.59,807,4.199]],["title/injectables/ParseIntPipe.html",[87,0.835,808,3.005]],["body/injectables/ParseIntPipe.html",[3,0.182,4,0.162,5,0.162,7,0.631,8,1.833,11,0.015,13,0.758,15,1.356,16,1.43,17,0.361,18,0.863,23,0.182,24,0.205,27,1.302,29,0.012,30,0.012,87,1.269,88,1.747,106,1.602,107,1.201,108,0.758,109,1.413,216,2.103,219,3.223,233,2.464,234,2.103,602,3.924,808,4.568,809,5.088,810,3.924,811,5.088,812,5.088,813,5.647,814,5.975,815,4.534,816,3.868,817,5.088,818,3.924,819,5.879,820,4.534,821,4.534,822,4.534,823,4.534]],["title/entities/Post.html",[115,1.49,406,2.229]],["body/entities/Post.html",[3,0.119,4,0.105,5,0.105,7,0.41,10,2.034,11,0.016,13,1.137,16,1.187,17,0.413,21,3.7,23,0.175,24,0.134,29,0.009,30,0.009,107,1.517,108,1.181,109,1.359,115,1.998,120,1.986,121,1.602,144,1.833,239,1.516,247,5.54,312,2.022,319,4.03,347,3.817,384,1.699,406,2.512,407,1.94,409,1.477,410,4.03,412,4.03,414,2.552,418,3.773,477,4.023,478,4.03,479,3.687,482,2.241,824,2.552,825,5.186,826,5.186,827,5.186,828,2.948,829,4.359,830,2.948,831,2.948,832,2.948,833,2.948,834,5.73,835,4.359,836,2.948,837,5.186,838,2.948,839,2.948,840,4.359,841,4.359,842,2.948,843,2.948,844,2.948,845,4.359,846,2.948,847,2.948,848,2.552,849,4.359,850,4.359,851,3.773,852,4.359,853,2.948]],["title/controllers/PostsController.html",[0,1.367,854,2.75]],["body/controllers/PostsController.html",[0,0.976,2,0.976,3,0.111,4,0.099,5,0.099,7,0.384,8,1.294,10,1.78,11,0.016,13,0.994,15,1.78,16,1.481,17,0.517,18,0.526,23,0.111,24,0.125,25,1.42,26,1.165,27,1.795,29,0.008,30,0.008,98,1.592,106,2.102,107,1.575,108,0.994,109,1.854,115,1.922,116,2.876,118,1.592,119,0.861,120,1.621,124,1.221,140,2.104,142,2.393,143,1.592,144,2.208,146,2.393,147,1.818,150,2.393,151,1.592,243,2.146,311,1.281,313,1.281,315,1.281,320,1.467,321,2.256,322,2.256,323,2.135,337,1.696,338,1.592,339,1.696,342,3.226,346,1.347,391,1.818,474,3.98,552,3.226,559,1.964,560,1.964,561,2.391,792,3.944,794,3.226,795,2.146,854,2.952,855,2.391,856,2.762,857,2.762,858,2.762,859,2.762,860,4.989,861,2.762,862,2.762,863,4.389,864,2.762,865,3.064,866,2.391,867,3.226,868,2.762,869,2.762,870,2.762,871,2.762,872,2.762,873,2.762,874,2.762,875,2.762,876,2.762,877,2.762,878,2.762]],["title/modules/PostsModule.html",[31,1.31,44,2.545]],["body/modules/PostsModule.html",[2,2.105,3,0.186,4,0.165,5,0.165,11,0.016,17,0.573,18,0.881,23,0.186,24,0.21,29,0.012,30,0.012,31,2.017,33,2.044,34,2.763,44,4.848,46,3.062,47,2.379,48,2.379,50,3.237,51,2.514,115,1.782,363,3.288,364,2.514,854,4.682,865,4.524,866,4.004,879,4.004,880,4.004,881,4.626,882,4.626,883,4.004,884,4.626]],["title/injectables/PostsService.html",[87,0.835,865,2.375]],["body/injectables/PostsService.html",[3,0.081,4,0.072,5,0.072,7,0.281,8,1.013,11,0.016,13,0.964,15,1.641,16,0.846,17,0.46,18,0.384,23,0.081,24,0.091,27,1.575,29,0.006,30,0.006,87,0.702,88,0.777,106,2.038,107,1.528,108,0.964,109,1.798,115,2.114,120,1.95,121,1.097,124,0.892,140,1.371,144,2.379,177,3.471,188,1.097,190,1.508,216,2.676,217,3.086,219,2.311,233,2.219,234,1.894,239,1.037,260,3.327,311,1.508,312,3.393,313,1.508,315,1.508,320,1.149,321,1.767,322,1.767,323,1.671,346,0.984,364,1.097,373,3.152,379,3.172,381,1.568,382,1.568,383,3.327,384,1.163,391,2.139,393,2.526,394,2.526,395,3.533,403,1.568,405,1.568,474,3.152,477,2.686,479,2.311,794,4.663,795,4.262,796,3.533,816,1.328,863,3.796,865,1.996,867,2.526,883,1.747,885,1.747,886,4.082,887,2.018,888,2.018,889,3.251,890,3.251,891,2.018,892,3.251,893,2.018,894,2.814,895,2.018,896,2.018,897,2.018,898,2.018,899,4.082,900,2.018,901,2.018,902,2.018,903,3.251,904,2.018,905,2.018,906,2.018,907,3.251,908,3.251,909,4.082,910,3.251,911,2.018,912,2.018,913,4.082,914,2.018,915,2.018,916,2.018,917,2.018,918,2.018,919,3.251,920,2.018,921,2.018]],["title/injectables/ToBooleanPipe.html",[87,0.835,922,3.005]],["body/injectables/ToBooleanPipe.html",[3,0.182,4,0.161,5,0.161,7,0.628,8,1.828,11,0.016,13,0.755,15,1.351,17,0.36,18,0.86,23,0.182,24,0.205,27,1.684,29,0.012,30,0.012,87,1.266,88,1.74,106,1.596,107,1.196,108,1.089,109,1.408,243,3.509,307,3.909,482,2.322,552,3.509,811,5.075,812,5.075,814,5.966,816,4.535,817,5.075,818,3.909,922,4.556,923,5.075,924,3.909,925,4.516,926,5.864,927,3.909]],["title/classes/TokenPayloadDto.html",[24,0.175,210,2.375]],["body/classes/TokenPayloadDto.html",[3,0.22,4,0.195,5,0.195,7,0.761,11,0.015,13,0.915,16,1.37,23,0.22,24,0.248,29,0.013,30,0.013,64,2.309,94,1.449,108,0.915,210,4.061,409,2.24,603,4.701,928,4.736,929,5.471]],["title/classes/TokenPayloadResponseDto.html",[24,0.175,772,2.75]],["body/classes/TokenPayloadResponseDto.html",[3,0.215,4,0.191,5,0.191,7,0.743,11,0.015,13,0.893,17,0.426,23,0.215,24,0.242,29,0.013,30,0.013,94,1.415,108,0.893,120,2.482,121,2.903,244,4.289,409,2.208,603,4.634,772,4.634,930,4.624,931,5.343]],["title/classes/UpdateAuthDto.html",[24,0.175,148,2.545]],["body/classes/UpdateAuthDto.html",[3,0.221,4,0.196,5,0.196,11,0.015,17,0.528,23,0.221,24,0.249,29,0.013,30,0.013,94,1.456,112,3.376,119,1.714,125,4.272,148,4.364,320,1.943,429,3.908,754,2.55,932,4.759,933,3.169,934,5.498]],["title/classes/UpdateCategoryDto.html",[24,0.175,335,2.545]],["body/classes/UpdateCategoryDto.html",[3,0.195,4,0.173,5,0.173,7,0.674,10,1.449,11,0.016,13,0.81,16,1.27,17,0.536,23,0.195,24,0.278,29,0.012,30,0.012,94,1.282,107,1.782,108,0.81,119,1.51,320,1.711,325,2.974,335,4.035,345,3.763,409,2.077,425,3.153,426,3.333,427,2.246,432,2.974,458,3.333,463,3.763,754,2.246,933,2.791,935,5.308,936,4.843,937,4.843]],["title/classes/UpdateEmailConfirmationDto.html",[24,0.175,578,2.545]],["body/classes/UpdateEmailConfirmationDto.html",[3,0.218,4,0.194,5,0.194,11,0.015,17,0.524,23,0.218,24,0.246,29,0.013,30,0.013,64,2.136,94,1.435,119,1.689,320,1.915,420,2.945,465,3.566,467,4.211,578,4.327,605,4.691,754,2.514,933,3.123,938,4.691,939,5.419]],["title/classes/UpdateEmailDto.html",[24,0.175,639,2.545]],["body/classes/UpdateEmailDto.html",[3,0.221,4,0.196,5,0.196,11,0.015,17,0.528,23,0.221,24,0.249,29,0.013,30,0.013,94,1.456,119,1.714,320,1.943,468,3.376,470,4.272,639,4.364,642,4.272,754,2.55,933,3.169,940,4.759,941,5.498]],["title/classes/UpdateHealthDto.html",[24,0.175,730,2.545]],["body/classes/UpdateHealthDto.html",[3,0.221,4,0.196,5,0.196,11,0.015,17,0.528,23,0.221,24,0.249,29,0.013,30,0.013,94,1.456,119,1.714,320,1.943,471,3.376,473,4.272,730,4.364,740,4.759,754,2.55,933,3.169,942,4.759,943,5.498]],["title/classes/UpdatePostDto.html",[24,0.175,863,2.545]],["body/classes/UpdatePostDto.html",[3,0.174,4,0.155,5,0.155,7,0.602,10,1.706,11,0.016,13,0.953,16,1.404,17,0.54,23,0.174,24,0.258,29,0.011,30,0.011,94,1.146,108,0.953,119,1.349,320,1.529,409,1.932,425,2.932,426,3.466,427,2.007,432,2.657,458,3.466,474,2.657,476,3.362,478,4.955,479,4.534,480,3.745,481,3.745,482,2.932,485,4.936,486,4.936,487,3.745,754,2.007,863,3.752,867,3.362,933,2.494,944,5.52,945,4.327,946,3.745,947,3.745,948,4.327]],["title/classes/UpdateUserDto.html",[24,0.175,949,2.545]],["body/classes/UpdateUserDto.html",[3,0.192,4,0.171,5,0.171,7,0.665,10,1.431,11,0.016,13,0.799,16,1.26,17,0.533,23,0.245,24,0.276,29,0.012,30,0.012,94,1.266,108,0.799,119,1.49,239,2.459,320,1.69,409,2.061,425,3.128,427,2.218,456,5.265,458,3.306,488,2.936,490,3.715,754,2.218,933,2.756,949,4.402,950,5.265,951,5.791,952,4.782,953,4.782,954,3.715,955,4.782]],["title/entities/User.html",[120,1.257,406,2.229]],["body/entities/User.html",[3,0.109,4,0.097,5,0.097,7,0.377,10,1.984,11,0.016,13,1.108,16,1.455,17,0.393,21,3.785,23,0.109,24,0.185,29,0.008,30,0.008,64,1.602,103,3.245,107,1.306,108,1.108,109,2.067,115,2.707,120,1.602,144,1.743,223,2.842,239,2.104,312,2.288,384,1.562,391,3.616,406,2.359,407,1.783,409,1.386,410,3.832,412,5.374,417,2.345,482,3.489,511,3.18,805,2.105,848,4.268,851,2.345,927,3.542,951,4.268,956,2.345,957,4.268,958,2.71,959,2.71,960,2.71,961,4.931,962,2.71,963,2.71,964,2.71,965,2.71,966,2.71,967,2.71,968,2.71,969,2.71,970,4.931,971,2.71,972,2.71,973,2.71,974,4.931,975,2.71,976,5.899,977,2.71,978,2.71]],["title/controllers/UsersController.html",[0,1.367,979,2.75]],["body/controllers/UsersController.html",[0,1.096,2,1.096,3,0.125,4,0.111,5,0.111,7,0.431,8,1.41,10,1.867,11,0.016,13,1.044,15,1.867,16,1.457,17,0.497,18,0.59,23,0.125,24,0.141,25,1.594,26,1.308,27,1.793,29,0.009,30,0.009,98,1.787,106,2.074,107,1.554,108,0.981,109,1.83,115,2.058,116,2.607,118,1.787,119,0.967,124,1.37,138,2.04,140,2.475,142,2.607,143,1.787,144,2.303,146,2.607,147,2.04,150,2.607,151,1.787,192,2.746,311,1.438,313,1.438,315,1.438,320,1.598,321,2.458,322,2.458,323,2.326,337,1.904,338,1.787,339,1.904,341,2.684,346,1.513,488,4.002,949,4.538,954,3.515,979,3.216,980,2.684,981,2.684,982,2.684,983,3.101,984,3.101,985,3.101,986,3.101,987,3.101,988,3.101,989,2.684,990,3.101,991,3.101,992,3.101,993,3.101,994,3.101,995,3.101,996,3.101,997,3.101]],["title/modules/UsersModule.html",[31,1.31,45,2.229]],["body/modules/UsersModule.html",[2,2.056,3,0.18,4,0.159,5,0.159,11,0.016,17,0.567,18,0.85,23,0.18,24,0.202,29,0.011,30,0.011,31,1.971,33,1.972,34,2.699,45,4.283,46,2.992,47,2.295,48,2.295,50,3.162,51,2.425,120,1.45,192,4.006,363,3.172,364,2.425,654,5.036,979,4.602,989,3.863,998,3.863,999,3.863,1000,3.863,1001,4.463,1002,4.463,1003,3.863,1004,4.463]],["title/injectables/UsersService.html",[87,0.835,192,1.989]],["body/injectables/UsersService.html",[3,0.074,4,0.066,5,0.066,7,0.256,8,0.941,11,0.016,13,1.032,15,1.795,16,1.401,17,0.442,18,0.351,23,0.074,24,0.083,27,1.723,29,0.006,30,0.006,64,1.883,87,0.652,88,0.71,103,3.221,106,2.12,107,1.589,108,1.003,109,1.87,120,2.097,124,0.814,140,1.87,144,2.235,177,3.605,188,1.001,190,1.4,192,1.552,202,2.612,209,2.345,216,2.783,217,3.174,219,1.309,233,2.66,234,2.27,242,1.594,311,1.4,312,2.783,313,1.4,315,1.4,320,1.066,321,1.64,322,1.64,323,1.552,346,0.898,364,1.001,373,3.558,379,3.803,381,1.431,382,1.431,383,3.152,384,1.061,393,1.431,394,1.431,403,1.431,405,1.431,482,1.552,488,3.005,949,3.653,954,2.345,957,2.612,981,2.612,982,2.612,1003,1.594,1005,1.594,1006,3.018,1007,3.018,1008,3.018,1009,3.018,1010,1.842,1011,1.842,1012,3.018,1013,1.842,1014,1.842,1015,1.842,1016,3.018,1017,1.842,1018,3.018,1019,1.842,1020,3.018,1021,1.842,1022,1.842,1023,1.842,1024,3.018,1025,1.842,1026,1.842,1027,3.018,1028,1.842,1029,1.842,1030,1.842,1031,3.835,1032,4.894,1033,1.842,1034,1.842,1035,1.842,1036,1.842,1037,1.842,1038,1.842,1039,1.842,1040,1.842,1041,1.842,1042,3.018,1043,1.842,1044,1.842,1045,3.018,1046,3.018]],["title/coverage.html",[1047,4.109]],["body/coverage.html",[0,2.149,1,1.487,5,0.075,6,1.811,11,0.016,19,1.285,21,1.021,24,0.335,29,0.007,30,0.007,64,1.359,65,2.202,87,1.487,89,1.811,93,1.285,95,1.811,96,1.487,97,1.811,102,1.377,108,0.35,112,1.285,115,0.806,120,0.68,122,1.206,148,1.377,156,1.377,157,1.377,170,1.487,186,1.811,192,1.076,193,1.137,210,1.285,215,1.206,234,0.97,244,1.377,317,1.487,318,1.811,325,1.285,335,1.377,343,1.285,347,1.206,371,1.811,406,2.411,408,1.811,419,1.487,420,3.03,421,1.811,428,1.811,429,2.973,462,1.811,463,2.6,465,1.377,466,1.811,467,2.6,468,1.285,469,1.811,470,2.6,471,1.285,472,1.811,473,2.6,474,1.285,475,1.811,476,2.6,488,1.285,489,1.811,490,2.6,541,1.811,542,1.487,543,1.811,544,1.811,545,1.487,546,1.811,559,1.487,560,1.487,578,1.377,587,1.811,603,2.379,631,1.487,632,1.811,639,1.377,656,1.811,687,1.377,688,1.811,689,1.487,690,1.811,702,1.285,730,1.377,739,1.811,742,1.811,743,2.6,753,1.625,762,1.811,772,1.487,779,1.625,780,1.811,782,1.811,789,1.811,792,1.487,793,1.811,808,1.625,809,1.811,810,1.811,824,1.811,854,1.487,855,1.811,863,1.377,865,1.285,885,1.811,894,6.833,922,1.625,923,1.811,924,1.811,928,1.811,930,1.811,932,1.811,935,1.811,938,1.811,940,1.811,942,1.811,944,1.811,949,1.377,950,1.811,956,1.811,979,1.487,980,1.811,1005,1.811,1047,1.625,1048,2.092,1049,2.092,1050,2.092,1051,6.569,1052,5.854,1053,4.779,1054,4.779,1055,7.315,1056,2.092,1057,2.092,1058,2.092,1059,2.092,1060,2.092,1061,2.092,1062,1.811,1063,2.092,1064,1.811,1065,2.092,1066,1.811,1067,4.779,1068,2.897,1069,1.811,1070,1.811,1071,2.092,1072,2.092,1073,2.092]],["title/dependencies.html",[34,2.159,1074,2.792]],["body/dependencies.html",[11,0.016,18,0.725,24,0.237,29,0.01,30,0.01,34,1.766,53,3.294,55,1.957,103,2.505,119,1.186,128,3.294,129,3.294,163,2.505,165,2.337,169,2.957,209,2.957,364,2.068,384,2.194,427,1.766,673,3.294,699,2.957,770,4.643,771,4.527,787,3.294,805,2.957,813,3.294,946,3.294,947,3.294,1075,3.806,1076,3.806,1077,3.806,1078,3.806,1079,7.139,1080,3.806,1081,3.806,1082,3.806,1083,5.23,1084,3.806,1085,3.806,1086,3.806,1087,3.806,1088,3.806,1089,3.806,1090,3.806,1091,3.806,1092,3.806,1093,3.806,1094,3.806,1095,3.806,1096,3.806,1097,3.806,1098,3.806,1099,3.806,1100,3.806,1101,3.806,1102,3.806,1103,3.806,1104,3.806,1105,3.806,1106,3.806,1107,3.806,1108,3.806,1109,3.806,1110,3.806,1111,3.806,1112,3.806,1113,3.806,1114,3.806,1115,3.806,1116,3.806,1117,3.806,1118,3.806,1119,3.806]],["title/miscellaneous/enumerations.html",[1120,1.981,1121,4.029]],["body/miscellaneous/enumerations.html",[7,0.791,11,0.015,29,0.013,30,0.013,120,2.2,816,4.455,1120,3.494,1121,4.925,1122,5.86,1123,5.69,1124,6.771,1125,5.69,1126,6.771]],["title/miscellaneous/functions.html",[1120,1.981,1127,4.029]],["body/miscellaneous/functions.html",[7,0.829,11,0.014,29,0.014,30,0.014,1062,5.157,1064,6.378,1120,3.659,1127,5.157,1128,5.958]],["title/index.html",[7,0.449,1129,3.226,1130,3.226]],["body/index.html",[4,0.148,11,0.015,29,0.011,30,0.011,275,3.582,287,3.215,289,3.582,378,3.215,383,2.942,477,2.723,515,3.582,629,3.582,685,4.791,708,3.582,1047,3.215,1131,4.138,1132,4.138,1133,5.536,1134,4.138,1135,4.138,1136,4.138,1137,4.138,1138,4.138,1139,4.138,1140,6.238,1141,4.138,1142,4.138,1143,4.138,1144,7.296,1145,4.138,1146,4.138,1147,4.138,1148,7.144,1149,4.138,1150,4.138,1151,5.536,1152,4.138,1153,4.138,1154,4.138,1155,5.536,1156,4.138,1157,4.138,1158,4.138,1159,5.536,1160,5.536,1161,4.138,1162,4.138,1163,4.138,1164,4.138,1165,4.138,1166,4.138,1167,4.138,1168,4.138,1169,4.138,1170,4.138,1171,4.138,1172,4.138,1173,4.138,1174,4.138,1175,4.138,1176,4.138,1177,4.138,1178,3.582]],["title/modules.html",[33,2.337]],["body/modules.html",[11,0.012,29,0.012,30,0.012,32,3.548,33,2.206,38,3.284,39,3.284,40,3.284,41,3.284,42,2.877,43,3.284,44,3.284,45,2.877,272,6.672,287,5.989,723,4.32,1179,7.708,1180,7.776,1181,4.991]],["title/overview.html",[1182,4.578]],["body/overview.html",[2,1.126,11,0.016,19,3.331,29,0.009,30,0.009,32,5.496,33,1.409,34,2.141,35,2.759,36,2.759,37,2.759,38,4.89,39,4.153,40,3.57,41,4.66,42,4.005,43,4.153,44,4.153,45,4.005,46,2.373,47,1.639,48,1.639,88,1.228,94,0.844,122,3.127,153,2.759,155,2.759,156,3.57,157,3.57,192,3.489,193,3.688,215,3.127,343,3.331,358,2.759,359,2.759,407,2.098,581,2.759,583,2.759,650,2.759,651,2.759,652,2.759,702,3.331,733,2.759,734,2.759,865,3.331,879,2.759,880,2.759,998,2.759,999,2.759,1000,2.759,1182,2.759,1183,3.188,1184,3.188,1185,3.188,1186,3.188,1187,3.188]],["title/properties.html",[409,1.577,1074,2.792]],["body/properties.html",[11,0.015,29,0.014,30,0.014,378,4.558,409,1.987,477,3.86,1178,5.077,1188,5.866,1189,5.866,1190,5.866]],["title/miscellaneous/variables.html",[1120,1.981,1191,4.029]],["body/miscellaneous/variables.html",[7,0.649,11,0.016,16,0.966,21,2.921,27,1.34,29,0.012,30,0.012,108,0.78,120,1.515,216,2.164,239,3.587,373,2.864,482,2.398,559,4.256,560,3.315,749,4.037,753,4.652,757,4.037,816,4.591,1066,5.182,1068,4.037,1069,4.037,1070,6.039,1120,2.864,1122,4.037,1191,4.037,1192,4.664,1193,5.987,1194,4.664,1195,4.664,1196,4.664,1197,4.664,1198,4.664,1199,4.664,1200,4.664,1201,4.664,1202,4.664]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEmailConfirmationDto.html":{},"classes/CreateEmailDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Email.html":{},"classes/EmailConfirmation.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"modules/EmailsModule.html":{},"injectables/EmailsService.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":894,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1189,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1111,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1100,"title":{},"body":{"dependencies.html":{}}}],["0.2.45",{"_index":1119,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":727,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.1",{"_index":1099,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":1105,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1055,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1071,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1051,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1052,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1054,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1053,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1060,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1065,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1061,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":443,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["1.0.0",{"_index":1107,"title":{},"body":{"dependencies.html":{}}}],["1.1.19",{"_index":1076,"title":{},"body":{"dependencies.html":{}}}],["1/6",{"_index":1057,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["100",{"_index":370,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["1024",{"_index":714,"title":{},"body":{"controllers/HealthController.html":{}}}],["14",{"_index":1186,"title":{},"body":{"overview.html":{}}}],["16",{"_index":1056,"title":{},"body":{"coverage.html":{}}}],["17.1.1",{"_index":1077,"title":{},"body":{"dependencies.html":{}}}],["17.1.8",{"_index":1092,"title":{},"body":{"dependencies.html":{}}}],["2.0.0",{"_index":1080,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":1103,"title":{},"body":{"dependencies.html":{}}}],["2/6",{"_index":1059,"title":{},"body":{"coverage.html":{}}}],["23",{"_index":1187,"title":{},"body":{"overview.html":{}}}],["23505",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["3",{"_index":1185,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":1113,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":1094,"title":{},"body":{"dependencies.html":{}}}],["3.6.1",{"_index":1098,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":713,"title":{},"body":{"controllers/HealthController.html":{}}}],["300mb",{"_index":709,"title":{},"body":{"controllers/HealthController.html":{}}}],["33",{"_index":1058,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":368,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["4.0.0",{"_index":1106,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":1118,"title":{},"body":{"dependencies.html":{}}}],["41fdtnufdjlqmlb9ciaos7kvtb/d0szfwnce5xiu65bh7wcenq7wpufpewd2ykgb",{"_index":529,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["4xg0qazmg9lvqamsxv9jdrajk4eeellvkofppqsyupcd7voustbggeaxqmxmhngd",{"_index":526,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["5.0.0",{"_index":1090,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":1095,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":1102,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":1085,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":722,"title":{},"body":{"controllers/HealthController.html":{}}}],["6.7.3",{"_index":1104,"title":{},"body":{"dependencies.html":{}}}],["6fcrdl46sabjary2ofarbg2cpj1rnnl9hcuqff4wu6r5qwopk0xepvdkrtjj9v0",{"_index":527,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["7.2.0",{"_index":1115,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1184,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":1079,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":1088,"title":{},"body":{"dependencies.html":{}}}],["8.0.6",{"_index":1086,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":1081,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":1109,"title":{},"body":{"dependencies.html":{}}}],["8eep2wylb4lyr9ii5gh9rnaafy91myjkkqjloiv0horirmnelghdmfvq0n6ufa8i",{"_index":523,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["9",{"_index":1183,"title":{},"body":{"overview.html":{}}}],["access",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{}}}],["address",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{}}}],["adds",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{}}}],["admin",{"_index":1126,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["al",{"_index":441,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["allocated",{"_index":716,"title":{},"body":{"controllers/HealthController.html":{}}}],["already",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{}}}],["amazing",{"_index":1165,"title":{},"body":{"index.html":{}}}],["api",{"_index":92,"title":{},"body":{"injectables/AppService.html":{}}}],["apibearerauth",{"_index":342,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EmailsController.html":{},"controllers/PostsController.html":{}}}],["apibody",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiproperty",{"_index":458,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty()@isarray()@arraynotempty()@isstring({each",{"_index":481,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["apiproperty()@isnotempty()@isnumberstring",{"_index":952,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["apiproperty()@isnotempty()@isstring",{"_index":432,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["apiproperty()@isnotempty()@isstring()@isemail",{"_index":430,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{}}}],["apiproperty()@isnotempty()@isstring()@minlength(8)@maxlength(20)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":434,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["apiproperty()@isnotempty()@isstring()@minlength(8)@maxlength(32)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":493,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apitags",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('categories",{"_index":350,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apitags('email",{"_index":563,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["apitags('emails",{"_index":644,"title":{},"body":{"controllers/EmailsController.html":{}}}],["apitags('health",{"_index":701,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('posts",{"_index":870,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":991,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1146,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":626,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["applications",{"_index":1139,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":32,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":19,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":814,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ToBooleanPipe.html":{}}}],["array",{"_index":841,"title":{},"body":{"entities/Post.html":{}}}],["arraynotempty",{"_index":485,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["asc",{"_index":394,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["async",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["attempt",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":93,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailsService.html":{},"coverage.html":{}}}],["auth.controller",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateAuthDto.html":{}}}],["auth.dto.ts",{"_index":429,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["auth.dto.ts:16",{"_index":790,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["auth.dto.ts:18",{"_index":431,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["auth.dto.ts:23",{"_index":433,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["auth.dto.ts:27",{"_index":791,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["auth.dto.ts:34",{"_index":451,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["auth.guard",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":743,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:12",{"_index":750,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:7",{"_index":747,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":96,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":752,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":755,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":781,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":38,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":477,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["author.posts",{"_index":829,"title":{},"body":{"entities/Post.html":{}}}],["authorized",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice",{"_index":122,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":508,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":723,"title":{},"body":{"controllers/HealthController.html":{},"modules.html":{}}}],["avatarid",{"_index":977,"title":{},"body":{"entities/User.html":{}}}],["await",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":1166,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":602,"title":{},"body":{"injectables/EmailConfirmationsService.html":{},"injectables/ParseIntPipe.html":{}}}],["badrequestexception('bad",{"_index":615,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["badrequestexception('email",{"_index":613,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["badrequestexception(`validation",{"_index":822,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["bcrypt",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(createauthdto.password",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(updateuserdto.password",{"_index":1041,"title":{},"body":{"injectables/UsersService.html":{}}}],["blog",{"_index":91,"title":{},"body":{"injectables/AppService.html":{}}}],["body",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":927,"title":{},"body":{"injectables/ToBooleanPipe.html":{},"entities/User.html":{}}}],["boolean.pipe.ts",{"_index":924,"title":{},"body":{"injectables/ToBooleanPipe.html":{},"coverage.html":{}}}],["boolean.pipe.ts:5",{"_index":925,"title":{},"body":{"injectables/ToBooleanPipe.html":{}}}],["bootstrap",{"_index":1064,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bqawoje4mdyga1ueawwvowfhyti0yjutnzzjys00mmnilwi2nzqtyzu5nmzkzgvm",{"_index":519,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["break",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["browse",{"_index":1180,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"modules.html":{}}}],["building",{"_index":1134,"title":{},"body":{"index.html":{}}}],["ca",{"_index":517,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cache",{"_index":1096,"title":{},"body":{"dependencies.html":{}}}],["cacheinterceptor",{"_index":340,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["cachemodule",{"_index":361,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["cachemodule.register",{"_index":366,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["canactivate",{"_index":744,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":748,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["carácter",{"_index":449,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["case",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{}}}],["categories",{"_index":319,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Post.html":{}}}],["categories.controller",{"_index":362,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.service",{"_index":344,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories/categories.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["categoriescontroller",{"_index":317,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":39,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesservice",{"_index":343,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["category",{"_index":347,"title":{"entities/Category.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Post.html":{},"coverage.html":{}}}],["category.dto",{"_index":345,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":463,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:8",{"_index":464,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:9",{"_index":936,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.posts",{"_index":853,"title":{},"body":{"entities/Post.html":{}}}],["category.posts)@jointable",{"_index":831,"title":{},"body":{"entities/Post.html":{}}}],["categoryrepository",{"_index":387,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["change",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["chdw6yohl4wa2lehrc6ruewx4fgkuen/2jtqczuhuqhpsw0evmgmko0mbfgoo4lh",{"_index":528,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["check",{"_index":691,"title":{},"body":{"controllers/HealthController.html":{}}}],["class",{"_index":24,"title":{"classes/Auth.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEmailConfirmationDto.html":{},"classes/CreateEmailDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/Email.html":{},"classes/EmailConfirmation.html":{},"classes/Health.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEmailConfirmationDto.html":{},"classes/CreateEmailDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Email.html":{},"classes/EmailConfirmation.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"modules/EmailsModule.html":{},"injectables/EmailsService.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":94,"title":{},"body":{"classes/Auth.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEmailConfirmationDto.html":{},"classes/CreateEmailDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/Email.html":{},"classes/EmailConfirmation.html":{},"classes/Health.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":988,"title":{},"body":{"controllers/UsersController.html":{}}}],["click",{"_index":628,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["cloudflare",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":358,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":359,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationsmodule",{"_index":581,"title":{},"body":{"modules/EmailConfirmationsModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationsmodule_imports",{"_index":582,"title":{},"body":{"modules/EmailConfirmationsModule.html":{}}}],["cluster_emailconfirmationsmodule_providers",{"_index":583,"title":{},"body":{"modules/EmailConfirmationsModule.html":{},"overview.html":{}}}],["cluster_emailsmodule",{"_index":650,"title":{},"body":{"modules/EmailsModule.html":{},"overview.html":{}}}],["cluster_emailsmodule_exports",{"_index":651,"title":{},"body":{"modules/EmailsModule.html":{},"overview.html":{}}}],["cluster_emailsmodule_providers",{"_index":652,"title":{},"body":{"modules/EmailsModule.html":{},"overview.html":{}}}],["cluster_healthmodule",{"_index":733,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_healthmodule_providers",{"_index":734,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":879,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":880,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":998,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1000,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":999,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":412,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["column('text",{"_index":840,"title":{},"body":{"entities/Post.html":{}}}],["column({default",{"_index":963,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":961,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":958,"title":{},"body":{"entities/User.html":{}}}],["compodoc/compodoc",{"_index":1075,"title":{},"body":{"dependencies.html":{}}}],["concerns",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["configmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationsModule.html":{}}}],["configmodule.forroot",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/EmailConfirmationsService.html":{},"modules/EmailsModule.html":{},"injectables/EmailsService.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_expiration_time')}s",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":514,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_db",{"_index":506,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":501,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":505,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":502,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":504,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["confirm",{"_index":627,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["confirmado",{"_index":572,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["confirmation",{"_index":555,"title":{},"body":{"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{}}}],["confirmation.dto",{"_index":605,"title":{},"body":{"injectables/EmailConfirmationsService.html":{},"classes/UpdateEmailConfirmationDto.html":{}}}],["confirmation.dto.ts",{"_index":467,"title":{},"body":{"classes/CreateEmailConfirmationDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"coverage.html":{}}}],["confirmation.entity.ts",{"_index":544,"title":{},"body":{"classes/EmailConfirmation.html":{},"coverage.html":{}}}],["confirmations",{"_index":547,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["confirmations.controller",{"_index":585,"title":{},"body":{"modules/EmailConfirmationsModule.html":{}}}],["confirmations.controller.ts",{"_index":546,"title":{},"body":{"controllers/EmailConfirmationsController.html":{},"coverage.html":{}}}],["confirmations.controller.ts:26",{"_index":551,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["confirmations.controller.ts:36",{"_index":557,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["confirmations.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmations.module.ts",{"_index":584,"title":{},"body":{"modules/EmailConfirmationsModule.html":{}}}],["confirmations.service",{"_index":558,"title":{},"body":{"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{}}}],["confirmations.service.ts",{"_index":587,"title":{},"body":{"injectables/EmailConfirmationsService.html":{},"coverage.html":{}}}],["confirmations.service.ts:13",{"_index":592,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["confirmations.service.ts:21",{"_index":596,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["confirmations.service.ts:24",{"_index":598,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["confirmations.service.ts:40",{"_index":594,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["confirmations.service.ts:47",{"_index":599,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["confirmations.service.ts:54",{"_index":601,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["confirmations/dto/confimemail.dto.ts",{"_index":421,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["confirmations/dto/confimemail.dto.ts:6",{"_index":424,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["confirmations/dto/create",{"_index":466,"title":{},"body":{"classes/CreateEmailConfirmationDto.html":{},"coverage.html":{}}}],["confirmations/dto/update",{"_index":938,"title":{},"body":{"classes/UpdateEmailConfirmationDto.html":{},"coverage.html":{}}}],["confirmations/email",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"coverage.html":{}}}],["confirmations/entities/email",{"_index":543,"title":{},"body":{"classes/EmailConfirmation.html":{},"coverage.html":{}}}],["confirmed",{"_index":617,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["confirmemail",{"_index":588,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["confirmemail(email",{"_index":593,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["confirmemaildto",{"_index":419,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"classes/ConfirmEmailDto.html":{},"injectables/EmailConfirmationsService.html":{},"coverage.html":{}}}],["conflictexception",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('email",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":783,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":659,"title":{},"body":{"injectables/EmailsService.html":{}}}],["constructor(jwtservice",{"_index":591,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["constructor(postrepository",{"_index":887,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":745,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(userrepository",{"_index":1010,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["contact",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["contendrán",{"_index":440,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["context",{"_index":751,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.getclass",{"_index":760,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":759,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["contraseñas",{"_index":439,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('categories",{"_index":349,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('email",{"_index":562,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["controller('emails",{"_index":643,"title":{},"body":{"controllers/EmailsController.html":{}}}],["controller('health",{"_index":700,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('posts",{"_index":869,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":990,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"controllers/EmailsController.html":{},"modules/EmailsModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["count",{"_index":910,"title":{},"body":{"injectables/PostsService.html":{}}}],["coverage",{"_index":1047,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":320,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/UsersController.html":{}}}],["create(@getuser",{"_index":871,"title":{},"body":{"controllers/PostsController.html":{}}}],["create(@query",{"_index":565,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["create(createauthdto",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["create(createcategorydto",{"_index":324,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["create(createemailconfirmationdto",{"_index":595,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["create(createemaildto",{"_index":634,"title":{},"body":{"controllers/EmailsController.html":{},"injectables/EmailsService.html":{}}}],["create(createhealthdto",{"_index":741,"title":{},"body":{"injectables/HealthService.html":{}}}],["create(createpostdto",{"_index":890,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createuserdto",{"_index":982,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(query",{"_index":549,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["create(user",{"_index":856,"title":{},"body":{"controllers/PostsController.html":{}}}],["createauthdto",{"_index":112,"title":{"classes/CreateAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["createauthdto.email",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["createcategorydto",{"_index":325,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["created_at",{"_index":835,"title":{},"body":{"entities/Post.html":{}}}],["createdat",{"_index":825,"title":{},"body":{"entities/Post.html":{}}}],["createdatecolumn",{"_index":849,"title":{},"body":{"entities/Post.html":{}}}],["createdatecolumn({type",{"_index":833,"title":{},"body":{"entities/Post.html":{}}}],["createduser",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["createemailconfirmationdto",{"_index":465,"title":{"classes/CreateEmailConfirmationDto.html":{}},"body":{"classes/CreateEmailConfirmationDto.html":{},"injectables/EmailConfirmationsService.html":{},"classes/UpdateEmailConfirmationDto.html":{},"coverage.html":{}}}],["createemaildto",{"_index":468,"title":{"classes/CreateEmailDto.html":{}},"body":{"classes/CreateEmailDto.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"classes/UpdateEmailDto.html":{},"coverage.html":{}}}],["createhealthdto",{"_index":471,"title":{"classes/CreateHealthDto.html":{}},"body":{"classes/CreateHealthDto.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"classes/UpdateHealthDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpostdto",{"_index":474,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["createpostdto.author",{"_index":902,"title":{},"body":{"injectables/PostsService.html":{}}}],["createtransport",{"_index":672,"title":{},"body":{"injectables/EmailsService.html":{}}}],["createuserdto",{"_index":488,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currenthashedrefreshtoken",{"_index":978,"title":{},"body":{"entities/User.html":{}}}],["data",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":331,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":40,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"entities/Post.html":{}}}],["date.getutcdate",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["date.getutcfullyear",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["date.getutchours",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["date.getutcminutes",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["date.getutcmonth",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["date.getutcseconds",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["day",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["de",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodeconfirmationtoken",{"_index":589,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["decodeconfirmationtoken(confirmemaildto",{"_index":597,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":339,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deletedat",{"_index":826,"title":{},"body":{"entities/Post.html":{}}}],["deletedatecolumn",{"_index":837,"title":{},"body":{"entities/Post.html":{}}}],["deleteresponse",{"_index":403,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["deleteresponse.affected",{"_index":405,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["deletes",{"_index":377,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["dependencies",{"_index":34,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EmailConfirmationsModule.html":{},"modules/EmailsModule.html":{},"modules/HealthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":378,"title":{},"body":{"injectables/CategoriesService.html":{},"index.html":{},"properties.html":{}}}],["detected",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["development",{"_index":1147,"title":{},"body":{"index.html":{}}}],["disk",{"_index":719,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":694,"title":{},"body":{"controllers/HealthController.html":{}}}],["dist/**/*.entity{.ts,.js",{"_index":507,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["documentation",{"_index":1048,"title":{},"body":{"coverage.html":{}}}],["dropschema",{"_index":510,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dt+fjukdfksnrlmaqvcu/ecc2ypneawduitkvco+graopgu4ymf8+aqmgwidaqab",{"_index":530,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dto/confimemail.dto",{"_index":604,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["dto/create",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/token",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["dto/update",{"_index":346,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["e2e",{"_index":1156,"title":{},"body":{"index.html":{}}}],["each",{"_index":487,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["efficient",{"_index":1135,"title":{},"body":{"index.html":{}}}],["email",{"_index":64,"title":{"classes/Email.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateEmailConfirmationDto.html":{},"classes/CreateUserDto.html":{},"classes/Email.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/TokenPayloadDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["email.dto",{"_index":642,"title":{},"body":{"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"classes/UpdateEmailDto.html":{}}}],["email.dto.ts",{"_index":470,"title":{},"body":{"classes/CreateEmailDto.html":{},"classes/UpdateEmailDto.html":{},"coverage.html":{}}}],["email:${email",{"_index":1045,"title":{},"body":{"injectables/UsersService.html":{}}}],["email_confirmation_url",{"_index":623,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["emailconfirmation",{"_index":542,"title":{"classes/EmailConfirmation.html":{}},"body":{"classes/EmailConfirmation.html":{},"injectables/EmailConfirmationsService.html":{},"coverage.html":{}}}],["emailconfirmationmodule",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["emailconfirmations",{"_index":630,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["emailconfirmationscontroller",{"_index":545,"title":{"controllers/EmailConfirmationsController.html":{}},"body":{"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"coverage.html":{}}}],["emailconfirmationsmodule",{"_index":41,"title":{"modules/EmailConfirmationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailConfirmationsModule.html":{},"modules.html":{},"overview.html":{}}}],["emailconfirmationsservice",{"_index":215,"title":{"injectables/EmailConfirmationsService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"coverage.html":{},"overview.html":{}}}],["emails",{"_index":633,"title":{},"body":{"controllers/EmailsController.html":{}}}],["emails.controller",{"_index":655,"title":{},"body":{"modules/EmailsModule.html":{}}}],["emails.service",{"_index":641,"title":{},"body":{"controllers/EmailsController.html":{},"modules/EmailsModule.html":{}}}],["emails/emails.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["emailsconfirmationservice",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailscontroller",{"_index":631,"title":{"controllers/EmailsController.html":{}},"body":{"controllers/EmailsController.html":{},"modules/EmailsModule.html":{},"coverage.html":{}}}],["emailsmodule",{"_index":42,"title":{"modules/EmailsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailConfirmationsModule.html":{},"modules/EmailsModule.html":{},"modules.html":{},"overview.html":{}}}],["emailsservice",{"_index":193,"title":{"injectables/EmailsService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"modules/EmailsModule.html":{},"injectables/EmailsService.html":{},"coverage.html":{},"overview.html":{}}}],["emailthanks",{"_index":686,"title":{},"body":{"injectables/EmailsService.html":{}}}],["enable",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["entities",{"_index":407,"title":{},"body":{"entities/Category.html":{},"modules/DatabaseModule.html":{},"entities/Post.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/category.entity",{"_index":348,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["entities/post.entity",{"_index":883,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["entities/user.entity",{"_index":1003,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":406,"title":{"entities/Category.html":{},"entities/Post.html":{},"entities/User.html":{}},"body":{"entities/Category.html":{},"entities/Post.html":{},"entities/User.html":{},"coverage.html":{}}}],["enumerations",{"_index":1121,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envfilepath",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{}}}],["error.code",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["error?.name",{"_index":611,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["especial",{"_index":450,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["exceed",{"_index":721,"title":{},"body":{"controllers/HealthController.html":{}}}],["excists",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["exclude",{"_index":974,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":749,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":379,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["expired",{"_index":614,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["expiresin",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"injectables/EmailConfirmationsService.html":{}}}],["export",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEmailConfirmationDto.html":{},"classes/CreateEmailDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Email.html":{},"classes/EmailConfirmation.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"modules/EmailsModule.html":{},"injectables/EmailsService.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":654,"title":{},"body":{"modules/EmailsModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":1083,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":754,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":768,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":776,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["factor",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["failed",{"_index":823,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["false",{"_index":511,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{}}}],["fetches",{"_index":330,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["fgeswqzrmh15ybd3e/0keqikv/qarmmhknznvaksh+ta8mcrbqic+x0srzxqvzr8",{"_index":533,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEmailConfirmationDto.html":{},"classes/CreateEmailDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Email.html":{},"classes/EmailConfirmation.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"modules/EmailsModule.html":{},"injectables/EmailsService.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["financialempire",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["findall",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(offset",{"_index":892,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall(search",{"_index":858,"title":{},"body":{"controllers/PostsController.html":{}}}],["findone",{"_index":321,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1133,"title":{},"body":{"index.html":{}}}],["function",{"_index":1063,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1127,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["get('confirm",{"_index":564,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["get('confirm')@public",{"_index":550,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["get()@public",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["get()@public()@healthcheck",{"_index":692,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@useinterceptors(cacheinterceptor",{"_index":327,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getbyemail",{"_index":1006,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":1016,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemailandconfirm",{"_index":1007,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemailandconfirm(email",{"_index":1018,"title":{},"body":{"injectables/UsersService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":1129,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":559,"title":{},"body":{"controllers/EmailConfirmationsController.html":{},"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gmail",{"_index":676,"title":{},"body":{"injectables/EmailsService.html":{}}}],["graph",{"_index":1181,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":1163,"title":{},"body":{"index.html":{}}}],["guards/jwt",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["ha",{"_index":570,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["hapi/joi",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hashedpassword",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["health",{"_index":687,"title":{"classes/Health.html":{}},"body":{"classes/Health.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"coverage.html":{}}}],["health.controller",{"_index":737,"title":{},"body":{"modules/HealthModule.html":{}}}],["health.dto",{"_index":740,"title":{},"body":{"injectables/HealthService.html":{},"classes/UpdateHealthDto.html":{}}}],["health.dto.ts",{"_index":473,"title":{},"body":{"classes/CreateHealthDto.html":{},"classes/UpdateHealthDto.html":{},"coverage.html":{}}}],["health.service",{"_index":736,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":695,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":696,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":689,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":43,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthservice",{"_index":702,"title":{"injectables/HealthService.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"coverage.html":{},"overview.html":{}}}],["heap",{"_index":712,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailsService.html":{}}}],["helmet",{"_index":1101,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":629,"title":{},"body":{"injectables/EmailConfirmationsService.html":{},"index.html":{}}}],["hlrlv4o0g24lljbboxrrzzcfidgksirmzn5vhjt3cflmohrao51rgdrwnysgzxlu",{"_index":537,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["host",{"_index":500,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/EmailsService.html":{}}}],["hour",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["hour}:${minutes}:${seconds",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["html",{"_index":684,"title":{},"body":{"injectables/EmailsService.html":{}}}],["https://dash.cloudflare.com/profile",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://nestjs.com",{"_index":1175,"title":{},"body":{"index.html":{}}}],["https://support.cloudflare.com",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1049,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":385,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["ignoreexpiration",{"_index":777,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":818,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ToBooleanPipe.html":{}}}],["import",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"modules/EmailsModule.html":{},"injectables/EmailsService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationsModule.html":{},"modules/HealthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEmailConfirmationDto.html":{},"classes/CreateEmailDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Email.html":{},"classes/EmailConfirmation.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"modules/EmailsModule.html":{},"injectables/EmailsService.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inicio",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["injectable",{"_index":87,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":88,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":382,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(category",{"_index":386,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["injectrepository(post",{"_index":901,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(user",{"_index":1026,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":1143,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1145,"title":{},"body":{"index.html":{}}}],["int.pipe.ts",{"_index":810,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:10",{"_index":815,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["internalservererrorexception",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["ip",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["is_public_key",{"_index":753,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":486,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["isemail",{"_index":452,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{}}}],["isemailconfirmed",{"_index":957,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["isnan(val",{"_index":821,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":425,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnumber",{"_index":802,"title":{},"body":{"classes/PaginationParams.html":{}}}],["isnumberstring",{"_index":456,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional",{"_index":804,"title":{},"body":{"classes/PaginationParams.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(0",{"_index":799,"title":{},"body":{"classes/PaginationParams.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(1",{"_index":797,"title":{},"body":{"classes/PaginationParams.html":{}}}],["ispasswordmatching",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["isphonenumber",{"_index":457,"title":{},"body":{"classes/CreateAuthDto.html":{}}}],["ispublic",{"_index":757,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":426,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty",{"_index":423,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["items",{"_index":909,"title":{},"body":{"injectables/PostsService.html":{}}}],["joi",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":1168,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":972,"title":{},"body":{"entities/User.html":{}}}],["jointable",{"_index":852,"title":{},"body":{"entities/Post.html":{}}}],["jwt",{"_index":771,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":170,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":775,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailConfirmationsModule.html":{}}}],["jwtmodule.register",{"_index":586,"title":{},"body":{"modules/EmailConfirmationsModule.html":{}}}],["jwtmodule.registerasync",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{}}}],["jwtstrategy",{"_index":156,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jypffq6ybdvid2ktaoxy6xufzzwovm/lq2aut9s9fsojxyqibv9bm8+dc8gh35i",{"_index":539,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["kamil",{"_index":1172,"title":{},"body":{"index.html":{}}}],["l6l/ijfj9xbaa7nj90z/v5/i7/mkexadzaxfhqypxgzgg1/p4ppha/bnuen/ti3o",{"_index":538,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["las",{"_index":438,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["letra",{"_index":444,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["license",{"_index":1178,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1160,"title":{},"body":{"index.html":{}}}],["limit",{"_index":794,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["link",{"_index":573,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["link')@public",{"_index":556,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["list",{"_index":332,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["local",{"_index":787,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":779,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":157,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logging",{"_index":509,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["login",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginauthdto",{"_index":102,"title":{"classes/LoginAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["mail",{"_index":670,"title":{},"body":{"injectables/EmailsService.html":{}}}],["mail.options",{"_index":666,"title":{},"body":{"injectables/EmailsService.html":{}}}],["manager",{"_index":1097,"title":{},"body":{"dependencies.html":{}}}],["manytomany",{"_index":418,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytomany(undefined",{"_index":414,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytoone",{"_index":851,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":828,"title":{},"body":{"entities/Post.html":{}}}],["markemailasconfirmed",{"_index":1008,"title":{},"body":{"injectables/UsersService.html":{}}}],["markemailasconfirmed(email",{"_index":1020,"title":{},"body":{"injectables/UsersService.html":{}}}],["matches",{"_index":455,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":461,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{}}}],["matching",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEmailConfirmationDto.html":{},"classes/CreateEmailDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Email.html":{},"classes/EmailConfirmation.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"modules/EmailsModule.html":{},"injectables/EmailsService.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matias.corvalan24@gmail.com",{"_index":683,"title":{},"body":{"injectables/EmailsService.html":{}}}],["matias.corvalan@aden.org",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["max",{"_index":369,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["maxlength",{"_index":454,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{}}}],["maxlength(20",{"_index":460,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["maxlength(32",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mayúscula",{"_index":445,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["memory",{"_index":710,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":697,"title":{},"body":{"controllers/HealthController.html":{}}}],["menos",{"_index":442,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["message",{"_index":437,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{}}}],["metadata",{"_index":813,"title":{},"body":{"injectables/ParseIntPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":926,"title":{},"body":{"injectables/ToBooleanPipe.html":{}}}],["method",{"_index":329,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miieqtccaqmgawibagiuvd88soxruqyo9kd5msg2ki2rjjmwdqyjkozihvcnaqem",{"_index":518,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["min",{"_index":803,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(0",{"_index":807,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(1",{"_index":806,"title":{},"body":{"classes/PaginationParams.html":{}}}],["minlength",{"_index":453,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{}}}],["minlength(8",{"_index":459,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{}}}],["minutes",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["minúscula",{"_index":446,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["miscellaneous",{"_index":1120,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1159,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1151,"title":{},"body":{"index.html":{}}}],["module",{"_index":31,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationsModule.html":{},"modules/EmailsModule.html":{},"modules/HealthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationsModule.html":{},"modules/EmailsModule.html":{},"modules/HealthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":33,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationsModule.html":{},"modules/EmailsModule.html":{},"modules/HealthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["month",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["more",{"_index":708,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["mtgwngydvqqddc85ywfhmjrins03nmnhltqyy2ityjy3nc1jntk2zmrkzwzjztcg",{"_index":521,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["myśliwiec",{"_index":1173,"title":{},"body":{"index.html":{}}}],["name",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"classes/UpdateCategoryDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":1140,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1177,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["nestjs/cli",{"_index":1078,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"modules/EmailsModule.html":{},"injectables/EmailsService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"modules/EmailsModule.html":{},"injectables/EmailsService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":946,"title":{},"body":{"classes/UpdatePostDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1082,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schematics",{"_index":1084,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"classes/LoginAuthDto.html":{},"controllers/PostsController.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":699,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/testing",{"_index":1087,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":364,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newcategory",{"_index":388,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["newpost",{"_index":903,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuser",{"_index":1027,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":1132,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":673,"title":{},"body":{"injectables/EmailsService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":671,"title":{},"body":{"injectables/EmailsService.html":{}}}],["nodemailertransport",{"_index":657,"title":{},"body":{"injectables/EmailsService.html":{}}}],["notfoundexception",{"_index":381,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`category",{"_index":397,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["notfoundexception(`post",{"_index":913,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(`user",{"_index":1032,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1144,"title":{},"body":{"index.html":{}}}],["nuevo",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["null",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ToBooleanPipe.html":{}}}],["nullable",{"_index":976,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["número",{"_index":447,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["o",{"_index":448,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/LoginAuthDto.html":{}}}],["oabfxjbquoss87rjjdjphi9pgqghi5uenfao3+hd33esl86kaukkslupy3cbrasz",{"_index":525,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["object",{"_index":609,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["offset",{"_index":795,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["onetomany",{"_index":848,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":969,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":973,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":1161,"title":{},"body":{"index.html":{}}}],["optional",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PaginationParams.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":668,"title":{},"body":{"injectables/EmailsService.html":{}}}],["options.from",{"_index":680,"title":{},"body":{"injectables/EmailsService.html":{}}}],["order",{"_index":393,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EmailConfirmationsModule.html":{},"modules/EmailsModule.html":{},"modules/HealthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1182,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["oz8wptadbgnvhq4efgqup/cwkxc3klopf7vu8ztgejzofx0wdwydvr0tbagwbgeb",{"_index":531,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["package",{"_index":1074,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["paginationparams",{"_index":792,"title":{"classes/PaginationParams.html":{}},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["paragraphs",{"_index":478,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"classes/UpdatePostDto.html":{}}}],["param",{"_index":338,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":355,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{}}}],["parameters",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseint(value",{"_index":820,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":808,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["partialtype",{"_index":933,"title":{},"body":{"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createauthdto",{"_index":934,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["partialtype(createcategorydto",{"_index":937,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createemailconfirmationdto",{"_index":939,"title":{},"body":{"classes/UpdateEmailConfirmationDto.html":{}}}],["partialtype(createemaildto",{"_index":941,"title":{},"body":{"classes/UpdateEmailDto.html":{}}}],["partialtype(createhealthdto",{"_index":943,"title":{},"body":{"classes/UpdateHealthDto.html":{}}}],["partialtype(createpostdto",{"_index":948,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["partialtype(createuserdto",{"_index":955,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailsService.html":{}}}],["passport",{"_index":770,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":767,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":774,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"entities/User.html":{}}}],["patch",{"_index":337,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["path",{"_index":728,"title":{},"body":{"controllers/HealthController.html":{}}}],["payload",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/JwtStrategy.html":{},"classes/TokenPayloadResponseDto.html":{},"coverage.html":{}}}],["payload.dto",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.dto.ts",{"_index":928,"title":{},"body":{"classes/TokenPayloadDto.html":{},"coverage.html":{}}}],["payload.dto.ts:2",{"_index":929,"title":{},"body":{"classes/TokenPayloadDto.html":{}}}],["payload.email",{"_index":610,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["pg",{"_index":1108,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":951,"title":{},"body":{"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["pipetransform",{"_index":817,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ToBooleanPipe.html":{}}}],["plaintextpassword",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["port",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["post",{"_index":115,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["post('/signin",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin')@public",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup')@public()@apibody({type",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('resend",{"_index":554,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["post.author",{"_index":970,"title":{},"body":{"entities/User.html":{}}}],["post.categories",{"_index":415,"title":{},"body":{"entities/Category.html":{}}}],["post.dto",{"_index":867,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts",{"_index":476,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:10",{"_index":945,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:14",{"_index":483,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:16",{"_index":480,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts:8",{"_index":484,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.name",{"_index":399,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["post.paragraphs",{"_index":917,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.title",{"_index":915,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":499,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["postrepository",{"_index":889,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":391,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":882,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":866,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":854,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":44,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":865,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":410,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["private",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":706,"title":{},"body":{"controllers/HealthController.html":{}}}],["process.env.port",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.postgres_db",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.postgres_host",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.postgres_password",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.postgres_port",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.postgres_user",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":515,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["progressive",{"_index":1131,"title":{},"body":{"index.html":{}}}],["project",{"_index":1162,"title":{},"body":{"index.html":{}}}],["promise",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["properties",{"_index":409,"title":{"properties.html":{}},"body":{"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailsService.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EmailConfirmationsModule.html":{},"modules/EmailsModule.html":{},"modules/HealthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Category.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/HealthController.html":{},"entities/Post.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["q7cp4qghyamvqhzcrexlg51za+mtca50wvyzkrvv59olxnfqddexvaq0d7mw4cbb",{"_index":524,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["qqpm1znjtvg10tj8ugukie5b7tttoxx998sxq5fiodub9cd8dmdkioqorczv18ji",{"_index":536,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["qt+tkwsiy9mzn2fu+cpvaqwc8mz5sthprlwxdl6phc9cxuubcwhjpcfxe7wxsh8e",{"_index":535,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["query",{"_index":552,"title":{},"body":{"controllers/EmailConfirmationsController.html":{},"controllers/PostsController.html":{},"injectables/ToBooleanPipe.html":{}}}],["query('search",{"_index":873,"title":{},"body":{"controllers/PostsController.html":{}}}],["questions",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["read",{"_index":1169,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["real",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["realip",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["redireccion",{"_index":569,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["reflect",{"_index":1110,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":746,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["rejectunauthorized",{"_index":516,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["relations",{"_index":395,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["remove",{"_index":322,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removes",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{}}}],["repository",{"_index":383,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["request",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user.user",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resendconfirmationlink",{"_index":548,"title":{},"body":{"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{}}}],["resendconfirmationlink(@getuser",{"_index":574,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["resendconfirmationlink(user",{"_index":553,"title":{},"body":{"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{}}}],["reset",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EmailConfirmationsModule.html":{},"modules/EmailsModule.html":{},"modules/HealthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response.dto",{"_index":773,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["response.dto.ts",{"_index":930,"title":{},"body":{"classes/TokenPayloadResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:4",{"_index":931,"title":{},"body":{"classes/TokenPayloadResponseDto.html":{}}}],["result",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEmailConfirmationDto.html":{},"classes/CreateEmailDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Email.html":{},"classes/EmailConfirmation.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"modules/EmailsModule.html":{},"injectables/EmailsService.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retornar",{"_index":568,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["return",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"controllers/HealthController.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":1112,"title":{},"body":{"dependencies.html":{}}}],["role.enum.ts",{"_index":1124,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["roles",{"_index":1070,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rss",{"_index":715,"title":{},"body":{"controllers/HealthController.html":{}}}],["run",{"_index":1148,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1114,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":1136,"title":{},"body":{"index.html":{}}}],["search",{"_index":860,"title":{},"body":{"controllers/PostsController.html":{}}}],["searchforposts",{"_index":886,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchforposts(text",{"_index":897,"title":{},"body":{"injectables/PostsService.html":{}}}],["seconds",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["secret",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"injectables/EmailConfirmationsService.html":{}}}],["secretorkey",{"_index":778,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sendmail",{"_index":658,"title":{},"body":{"injectables/EmailsService.html":{}}}],["sendmail(options",{"_index":665,"title":{},"body":{"injectables/EmailsService.html":{}}}],["sendverificationlink",{"_index":590,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["sendverificationlink(email",{"_index":600,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["server",{"_index":1137,"title":{},"body":{"index.html":{}}}],["service",{"_index":675,"title":{},"body":{"injectables/EmailsService.html":{}}}],["sesión",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["setmetadata('roles",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shared/decorators/public.decorator",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["side",{"_index":1138,"title":{},"body":{"index.html":{}}}],["sido",{"_index":571,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["signin",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(loginauthdto",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createauthdto",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["skip",{"_index":907,"title":{},"body":{"injectables/PostsService.html":{}}}],["smtp.gmail.com",{"_index":677,"title":{},"body":{"injectables/EmailsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEmailConfirmationDto.html":{},"classes/CreateEmailDto.html":{},"classes/CreateHealthDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/Email.html":{},"classes/EmailConfirmation.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"modules/EmailsModule.html":{},"injectables/EmailsService.html":{},"classes/Health.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HealthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailConfirmationDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdateHealthDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["space",{"_index":724,"title":{},"body":{"controllers/HealthController.html":{}}}],["sponsors",{"_index":1164,"title":{},"body":{"index.html":{}}}],["src/.../get",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1128,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":1193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1123,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":89,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":90,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:24",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:107",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:24",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:48",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:94",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/create",{"_index":428,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/login",{"_index":789,"title":{},"body":{"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/token",{"_index":603,"title":{},"body":{"injectables/EmailConfirmationsService.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":932,"title":{},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":95,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":742,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":780,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":762,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:21",{"_index":766,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:9",{"_index":764,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":782,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:12",{"_index":786,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:7",{"_index":784,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/categories/categories.controller.ts",{"_index":318,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/categories/categories.controller.ts:25",{"_index":326,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:35",{"_index":328,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:40",{"_index":333,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:45",{"_index":336,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:53",{"_index":334,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.module.ts",{"_index":360,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/categories/categories.service.ts",{"_index":371,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/categories/categories.service.ts:18",{"_index":372,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:27",{"_index":374,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:35",{"_index":375,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:46",{"_index":380,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:65",{"_index":376,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/dto/create",{"_index":462,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/dto/update",{"_index":935,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/entities/category.entity",{"_index":847,"title":{},"body":{"entities/Post.html":{}}}],["src/categories/entities/category.entity.ts",{"_index":408,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/categories/entities/category.entity.ts:12",{"_index":416,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:6",{"_index":411,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:9",{"_index":413,"title":{},"body":{"entities/Category.html":{}}}],["src/database/database.module.ts",{"_index":497,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/email",{"_index":420,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateEmailConfirmationDto.html":{},"classes/EmailConfirmation.html":{},"controllers/EmailConfirmationsController.html":{},"modules/EmailConfirmationsModule.html":{},"injectables/EmailConfirmationsService.html":{},"classes/UpdateEmailConfirmationDto.html":{},"coverage.html":{}}}],["src/emails/dto/create",{"_index":469,"title":{},"body":{"classes/CreateEmailDto.html":{},"coverage.html":{}}}],["src/emails/dto/update",{"_index":940,"title":{},"body":{"classes/UpdateEmailDto.html":{},"coverage.html":{}}}],["src/emails/emails.controller.ts",{"_index":632,"title":{},"body":{"controllers/EmailsController.html":{},"coverage.html":{}}}],["src/emails/emails.controller.ts:14",{"_index":635,"title":{},"body":{"controllers/EmailsController.html":{}}}],["src/emails/emails.controller.ts:19",{"_index":636,"title":{},"body":{"controllers/EmailsController.html":{}}}],["src/emails/emails.controller.ts:24",{"_index":637,"title":{},"body":{"controllers/EmailsController.html":{}}}],["src/emails/emails.controller.ts:29",{"_index":640,"title":{},"body":{"controllers/EmailsController.html":{}}}],["src/emails/emails.controller.ts:34",{"_index":638,"title":{},"body":{"controllers/EmailsController.html":{}}}],["src/emails/emails.module",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailConfirmationsModule.html":{}}}],["src/emails/emails.module.ts",{"_index":653,"title":{},"body":{"modules/EmailsModule.html":{}}}],["src/emails/emails.service",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{}}}],["src/emails/emails.service.ts",{"_index":656,"title":{},"body":{"injectables/EmailsService.html":{},"coverage.html":{}}}],["src/emails/emails.service.ts:10",{"_index":660,"title":{},"body":{"injectables/EmailsService.html":{}}}],["src/emails/emails.service.ts:21",{"_index":661,"title":{},"body":{"injectables/EmailsService.html":{}}}],["src/emails/emails.service.ts:25",{"_index":667,"title":{},"body":{"injectables/EmailsService.html":{}}}],["src/emails/emails.service.ts:30",{"_index":662,"title":{},"body":{"injectables/EmailsService.html":{}}}],["src/emails/emails.service.ts:40",{"_index":663,"title":{},"body":{"injectables/EmailsService.html":{}}}],["src/emails/emails.service.ts:44",{"_index":669,"title":{},"body":{"injectables/EmailsService.html":{}}}],["src/emails/emails.service.ts:48",{"_index":664,"title":{},"body":{"injectables/EmailsService.html":{}}}],["src/emails/entities/email.entity.ts",{"_index":541,"title":{},"body":{"classes/Email.html":{},"coverage.html":{}}}],["src/health/dto/create",{"_index":472,"title":{},"body":{"classes/CreateHealthDto.html":{},"coverage.html":{}}}],["src/health/dto/update",{"_index":942,"title":{},"body":{"classes/UpdateHealthDto.html":{},"coverage.html":{}}}],["src/health/entities/health.entity.ts",{"_index":688,"title":{},"body":{"classes/Health.html":{},"coverage.html":{}}}],["src/health/health.controller.ts",{"_index":690,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:38",{"_index":693,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":735,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/health/health.service.ts",{"_index":739,"title":{},"body":{"injectables/HealthService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1062,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dto/create",{"_index":475,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/update",{"_index":944,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/posts/entities/post.entity",{"_index":417,"title":{},"body":{"entities/Category.html":{},"entities/User.html":{}}}],["src/posts/entities/post.entity.ts",{"_index":824,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entities/post.entity.ts:19",{"_index":839,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:22",{"_index":843,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:25",{"_index":842,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:28",{"_index":838,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:31",{"_index":836,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:34",{"_index":846,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:37",{"_index":830,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entities/post.entity.ts:41",{"_index":832,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":855,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:25",{"_index":857,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:30",{"_index":859,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:42",{"_index":861,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:47",{"_index":864,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:52",{"_index":862,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":881,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":885,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:10",{"_index":888,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:16",{"_index":891,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:23",{"_index":893,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:33",{"_index":898,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:53",{"_index":895,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:64",{"_index":900,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:77",{"_index":896,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/shared/decorators/get",{"_index":560,"title":{},"body":{"controllers/EmailConfirmationsController.html":{},"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/decorators/public.decorator",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["src/shared/decorators/public.decorator.ts",{"_index":1068,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/decorators/roles.decorator.ts",{"_index":1069,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/pipes/parse",{"_index":809,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/shared/pipes/to",{"_index":923,"title":{},"body":{"injectables/ToBooleanPipe.html":{},"coverage.html":{}}}],["src/shared/utilities/paginationparams",{"_index":868,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/shared/utilities/paginationparams.ts",{"_index":793,"title":{},"body":{"classes/PaginationParams.html":{},"coverage.html":{}}}],["src/shared/utilities/paginationparams.ts:15",{"_index":800,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/shared/utilities/paginationparams.ts:21",{"_index":798,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/shared/utilities/paginationparams.ts:9",{"_index":801,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/users/dto/create",{"_index":489,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":950,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user",{"_index":1125,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/entities/user.entity",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"classes/TokenPayloadResponseDto.html":{}}}],["src/users/entities/user.entity.ts",{"_index":956,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":960,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":959,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":965,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:26",{"_index":967,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":968,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:32",{"_index":962,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:47",{"_index":964,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":971,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":980,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:24",{"_index":983,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:29",{"_index":984,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:34",{"_index":985,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":987,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:44",{"_index":986,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailConfirmationsModule.html":{}}}],["src/users/users.module.ts",{"_index":1001,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/JwtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":1005,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:10",{"_index":1011,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:16",{"_index":1013,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":1014,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:29",{"_index":1015,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":1023,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:55",{"_index":1022,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:62",{"_index":1017,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:71",{"_index":1019,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:81",{"_index":1025,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:90",{"_index":1021,"title":{},"body":{"injectables/UsersService.html":{}}}],["ssl",{"_index":513,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["stage.${process.env.node_env}.env",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["start",{"_index":1149,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1152,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1153,"title":{},"body":{"index.html":{}}}],["started",{"_index":1130,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1142,"title":{},"body":{"index.html":{}}}],["startid",{"_index":796,"title":{},"body":{"classes/PaginationParams.html":{},"injectables/PostsService.html":{}}}],["statements",{"_index":1050,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":1170,"title":{},"body":{"index.html":{}}}],["storage",{"_index":720,"title":{},"body":{"controllers/HealthController.html":{}}}],["strategies/jwt.strategy",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":769,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"controllers/HealthController.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/TokenPayloadDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{}}}],["super",{"_index":756,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":761,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"modules.html":{}}}],["svg",{"_index":1179,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1116,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["synchronize",{"_index":512,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":1073,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1072,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":908,"title":{},"body":{"injectables/PostsService.html":{}}}],["team",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailsService.html":{}}}],["terminusmodule",{"_index":738,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":685,"title":{},"body":{"injectables/EmailsService.html":{},"index.html":{}}}],["test:covsupport",{"_index":1158,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1157,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1155,"title":{},"body":{"index.html":{}}}],["text",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/PostsService.html":{}}}],["thanks",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["this.appservice.gethello",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.create(createauthdto",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.findall",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.findone(+id",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.remove(+id",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(loginauthdto",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createauthdto",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.update(+id",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":788,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.categoriesservice.create(createcategorydto",{"_index":351,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findall",{"_index":353,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findone(+id",{"_index":354,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.remove(+id",{"_index":357,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.update(+id",{"_index":356,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoryrepository.create(createcategorydto",{"_index":389,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.find",{"_index":392,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findone",{"_index":396,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findone(id",{"_index":398,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.save(newcategory",{"_index":390,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.save(post",{"_index":402,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.softdelete(id",{"_index":404,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.configservice.get",{"_index":622,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["this.configservice.get('email_pass",{"_index":679,"title":{},"body":{"injectables/EmailsService.html":{}}}],["this.configservice.get('email_user",{"_index":678,"title":{},"body":{"injectables/EmailsService.html":{}}}],["this.configservice.get('jwt_expiration_time')}s",{"_index":620,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":607,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["this.diskhealthindicator.checkstorage('disk",{"_index":725,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emailconfirmationsservice.confirmemail(email",{"_index":567,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["this.emailconfirmationsservice.decodeconfirmationtoken",{"_index":566,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["this.emailconfirmationsservice.findall",{"_index":576,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["this.emailconfirmationsservice.findone(+id",{"_index":577,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["this.emailconfirmationsservice.remove(+id",{"_index":580,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["this.emailconfirmationsservice.resendconfirmationlink(user",{"_index":575,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["this.emailconfirmationsservice.update",{"_index":579,"title":{},"body":{"controllers/EmailConfirmationsController.html":{}}}],["this.emailsconfirmationservice.sendverificationlink",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.emailsservice.create(createemaildto",{"_index":645,"title":{},"body":{"controllers/EmailsController.html":{}}}],["this.emailsservice.findall",{"_index":646,"title":{},"body":{"controllers/EmailsController.html":{}}}],["this.emailsservice.findone(+id",{"_index":647,"title":{},"body":{"controllers/EmailsController.html":{}}}],["this.emailsservice.remove(+id",{"_index":649,"title":{},"body":{"controllers/EmailsController.html":{}}}],["this.emailsservice.sendmail",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{}}}],["this.emailsservice.update(+id",{"_index":648,"title":{},"body":{"controllers/EmailsController.html":{}}}],["this.healthservice.check",{"_index":704,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.healthservice.create(createhealthdto",{"_index":703,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.healthservice.findone(+id",{"_index":729,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.healthservice.remove(+id",{"_index":732,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.healthservice.update(+id",{"_index":731,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.jwtservice.sign(payload",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{}}}],["this.jwtservice.verify(confirmemaildto.token",{"_index":606,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["this.memoryhealthindicator.checkheap('memory",{"_index":711,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memoryhealthindicator.checkrss('memory",{"_index":717,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.nodemailertransport",{"_index":674,"title":{},"body":{"injectables/EmailsService.html":{}}}],["this.nodemailertransport.sendmail",{"_index":682,"title":{},"body":{"injectables/EmailsService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":681,"title":{},"body":{"injectables/EmailsService.html":{}}}],["this.postrepository.create(createpostdto",{"_index":904,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.find",{"_index":906,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findandcount",{"_index":911,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findone",{"_index":912,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findone(id",{"_index":914,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(newpost",{"_index":905,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":920,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.softdelete(id",{"_index":921,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":872,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(offset",{"_index":875,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findone(+id",{"_index":876,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.remove(+id",{"_index":878,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.searchforposts(search",{"_index":874,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(+id",{"_index":877,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":758,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.sendverificationlink(user.email",{"_index":619,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["this.typeormhealthindicator.pingcheck('database",{"_index":705,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.userrepository.create(createuserdto",{"_index":1028,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":1030,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":1031,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone(id",{"_index":1033,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":1029,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":1043,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.softdelete(id",{"_index":1044,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update",{"_index":1046,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":993,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":994,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(+id",{"_index":995,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(email",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/JwtStrategy.html":{}}}],["this.usersservice.getbyemailandconfirm(email",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.markemailasconfirmed(email",{"_index":618,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["this.usersservice.remove(+id",{"_index":997,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":996,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateip(email",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.verifypassword(password",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["thresholdpercent",{"_index":726,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["timestamp",{"_index":834,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":479,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{}}}],["tobooleanpipe",{"_index":922,"title":{"injectables/ToBooleanPipe.html":{}},"body":{"injectables/ToBooleanPipe.html":{},"coverage.html":{}}}],["token",{"_index":422,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"injectables/EmailConfirmationsService.html":{}}}],["token=${token",{"_index":624,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["tokenexpirederror",{"_index":612,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["tokenpayloaddto",{"_index":210,"title":{"classes/TokenPayloadDto.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/JwtStrategy.html":{},"classes/TokenPayloadDto.html":{},"coverage.html":{}}}],["tokenpayloadresponsedto",{"_index":772,"title":{"classes/TokenPayloadResponseDto.html":{}},"body":{"injectables/JwtStrategy.html":{},"classes/TokenPayloadResponseDto.html":{},"coverage.html":{}}}],["touch",{"_index":1171,"title":{},"body":{"index.html":{}}}],["transform",{"_index":811,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ToBooleanPipe.html":{}}}],["transform(value",{"_index":812,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ToBooleanPipe.html":{}}}],["transformer",{"_index":805,"title":{},"body":{"classes/PaginationParams.html":{},"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":482,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"entities/Post.html":{},"injectables/ToBooleanPipe.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["true})@exclude",{"_index":966,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{}}}],["ttl",{"_index":367,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["twitter",{"_index":1176,"title":{},"body":{"index.html":{}}}],["two",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["type",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"injectables/ParseIntPipe.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"classes/TokenPayloadDto.html":{},"classes/TokenPayloadResponseDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":608,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["typeorm",{"_index":384,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormhealthindicator",{"_index":698,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":363,"title":{},"body":{"modules/CategoriesModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":365,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":884,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1004,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":498,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":947,"title":{},"body":{"classes/UpdatePostDto.html":{},"dependencies.html":{}}}],["types/bcrypt",{"_index":1089,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":1091,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1093,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1141,"title":{},"body":{"index.html":{}}}],["uhjvamvjdcbdqtccaaiwdqyjkozihvcnaqebbqadgggpadccayocgggbanowjr7f",{"_index":522,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["ui",{"_index":1117,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(error.message",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/ToBooleanPipe.html":{}}}],["unique",{"_index":975,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":1154,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":373,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1190,"title":{},"body":{"properties.html":{}}}],["unrecognized",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["update",{"_index":323,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EmailConfirmationsController.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmailsController.html":{},"controllers/HealthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/EmailConfirmationsService.html":{},"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateauthdto",{"_index":148,"title":{"classes/UpdateAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["updatecategorydto",{"_index":335,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecategorydto.name",{"_index":400,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updated_at",{"_index":845,"title":{},"body":{"entities/Post.html":{}}}],["updatedat",{"_index":827,"title":{},"body":{"entities/Post.html":{}}}],["updatedatecolumn",{"_index":850,"title":{},"body":{"entities/Post.html":{}}}],["updatedatecolumn({type",{"_index":844,"title":{},"body":{"entities/Post.html":{}}}],["updatedcategory",{"_index":401,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatedpost",{"_index":919,"title":{},"body":{"injectables/PostsService.html":{}}}],["updateduser",{"_index":1042,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateemailconfirmationdto",{"_index":578,"title":{"classes/UpdateEmailConfirmationDto.html":{}},"body":{"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"classes/UpdateEmailConfirmationDto.html":{},"coverage.html":{}}}],["updateemaildto",{"_index":639,"title":{"classes/UpdateEmailDto.html":{}},"body":{"controllers/EmailsController.html":{},"injectables/EmailsService.html":{},"classes/UpdateEmailDto.html":{},"coverage.html":{}}}],["updatehealthdto",{"_index":730,"title":{"classes/UpdateHealthDto.html":{}},"body":{"controllers/HealthController.html":{},"injectables/HealthService.html":{},"classes/UpdateHealthDto.html":{},"coverage.html":{}}}],["updateip",{"_index":1009,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateip(email",{"_index":1024,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatepostdto",{"_index":863,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updatepostdto.paragraphs",{"_index":918,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto.title",{"_index":916,"title":{},"body":{"injectables/PostsService.html":{}}}],["updates",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/HealthService.html":{}}}],["updateuserdto",{"_index":949,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.email",{"_index":1035,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.name",{"_index":1039,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.password",{"_index":1040,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.phone",{"_index":1037,"title":{},"body":{"injectables/UsersService.html":{}}}],["url",{"_index":621,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["use",{"_index":707,"title":{},"body":{"controllers/HealthController.html":{}}}],["useclass",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["used",{"_index":718,"title":{},"body":{"controllers/HealthController.html":{}}}],["usefactory",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["useinterceptors",{"_index":341,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":352,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":992,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":120,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/EmailConfirmationsController.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/EmailsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/TokenPayloadResponseDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":561,"title":{},"body":{"controllers/EmailConfirmationsController.html":{},"controllers/PostsController.html":{}}}],["user.decorator.ts",{"_index":1066,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":954,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":490,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":491,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":492,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":953,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":1034,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.ip",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.isemailconfirmed",{"_index":616,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["user.name",{"_index":1038,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.phone",{"_index":1036,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":503,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["userrepository",{"_index":1012,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrole",{"_index":1122,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":981,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1002,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":989,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":979,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":45,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailConfirmationsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":192,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationsService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["utc",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["val",{"_index":819,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["validate",{"_index":763,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":785,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":765,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationschema",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":427,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"classes/PaginationParams.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":816,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ToBooleanPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1067,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1191,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifypassword",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifypassword(plaintextpassword",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1188,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":1150,"title":{},"body":{"index.html":{}}}],["weak",{"_index":494,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["website",{"_index":1174,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":625,"title":{},"body":{"injectables/EmailConfirmationsService.html":{}}}],["wibadalbgnvhq8ebamcaqywdqyjkozihvcnaqembqadgggbak7rqang6ynf444j",{"_index":532,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["y2u3ifbyb2ply3qgq0ewhhcnmjiwmjeymtuzmjm4whcnmziwmjewmtuzmjm4wja6",{"_index":520,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["year",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["yes",{"_index":899,"title":{},"body":{"injectables/PostsService.html":{}}}],["yn+oxpibvk4iytuqwpvhfs65zueh6dwyixiileqs77j1foidgg",{"_index":540,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["you'd",{"_index":1167,"title":{},"body":{"index.html":{}}}],["ypmw3tnym1wctj51iwmcixlrphtsyigwvayv43jucohvzbqcgp4eyrlpce1i3iu6",{"_index":534,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["z",{"_index":436,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{}}}],["z])(?=.*[a",{"_index":435,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{}}}],["zoom",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EmailConfirmationsModule.html":{},"modules/EmailsModule.html":{},"modules/HealthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Public()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { Public } from './shared/decorators/public.decorator';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  @Public()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationsModule\n\nEmailConfirmationsModule\n\nAppModule -->\n\nEmailConfirmationsModule->AppModule\n\n\n\n\n\nEmailsModule\n\nEmailsModule\n\nAppModule -->\n\nEmailsModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailConfirmationsModule\n                        \n                        \n                            EmailsModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as Joi from '@hapi/joi';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { DatabaseModule } from './database/database.module';\nimport { PostsModule } from './posts/posts.module';\nimport { UsersModule } from './users/users.module';\nimport { HealthModule } from './health/health.module';\nimport { AuthModule } from './auth/auth.module';\nimport { CategoriesModule } from './categories/categories.module';\nimport { EmailsModule } from './emails/emails.module';\nimport { EmailConfirmationsModule } from './email-confirmations/email-confirmations.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: [`stage.${process.env.NODE_ENV}.env`],\n      validationSchema: Joi.object({\n        POSTGRES_HOST: Joi.string().required() || process.env.POSTGRES_HOST,\n        POSTGRES_PORT: Joi.number().required() || process.env.POSTGRES_PORT,\n        POSTGRES_USER: Joi.string().required() || process.env.POSTGRES_USER,\n        POSTGRES_PASSWORD:\n          Joi.string().required() || process.env.POSTGRES_PASSWORD,\n        POSTGRES_DB: Joi.string().required() || process.env.POSTGRES_DB,\n        PORT: Joi.number() || process.env.PORT,\n      })\n    }),\n    DatabaseModule,\n    PostsModule,\n    UsersModule,\n    HealthModule,\n    AuthModule,\n    CategoriesModule,\n    EmailsModule,\n    EmailConfirmationsModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'BLOG API';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                signIn\n                            \n                            \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        signIn\n                        \n                    \n                \n            \n            \n                \nsignIn(loginAuthDto: LoginAuthDto, ip: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signIn')@Public()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginAuthDto\n                                    \n                                                LoginAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ip\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUp\n                        \n                    \n                \n            \n            \n                \nsignUp(createAuthDto: CreateAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signUp')@Public()@ApiBody({type: CreateAuthDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAuthDto\n                                    \n                                                CreateAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from '@nestjs/common';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\nimport User from 'src/users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { CreateAuthDto } from './dto/create-auth.dto';\nimport { LoginAuthDto } from './dto/login-auth.dto';\nimport { RealIP } from 'nestjs-real-ip';\nimport { Public } from 'src/shared/decorators/public.decorator';\n\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('/signUp')\n  @Public()\n  @ApiBody({ type: CreateAuthDto })\n  signUp(@Body() createAuthDto: CreateAuthDto): Promise {\n    return this.authService.signUp(createAuthDto);\n  }\n\n  @Post('/signIn')\n  @Public()\n  signIn(\n    @Body() loginAuthDto: LoginAuthDto,\n    @RealIP() ip: string,\n  ): Promise {\n    return this.authService.signIn(loginAuthDto, ip);\n  }\n\n  // @Post()\n  // create(@Body() createAuthDto: CreateAuthDto) {\n  //   return this.authService.create(createAuthDto);\n  // }\n\n  // @Get()\n  // findAll() {\n  //   return this.authService.findAll();\n  // }\n\n  // @Get(':id')\n  // findOne(@Param('id') id: string) {\n  //   return this.authService.findOne(+id);\n  // }\n\n  // @Patch(':id')\n  // update(@Param('id') id: string, @Body() updateAuthDto: UpdateAuthDto) {\n  //   return this.authService.update(+id, updateAuthDto);\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.authService.remove(+id);\n  // }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nEmailsModule\n\nEmailsModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nEmailsModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { EmailsModule } from 'src/emails/emails.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: `${configService.get('JWT_EXPIRATION_TIME')}s`,\n        },\n      }),\n    }),\n    PassportModule,\n    ConfigModule,\n    EmailsModule,\n    // EmailConfirmationModule\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    JwtStrategy,\n    LocalStrategy,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, emailsService: EmailsService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailsService\n                                                  \n                                                        \n                                                                        EmailsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(loginAuthDto: LoginAuthDto, ip: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginAuthDto\n                                    \n                                                LoginAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ip\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createAuthDto: CreateAuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAuthDto\n                                    \n                                                CreateAuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport User from 'src/users/entities/user.entity';\nimport { UsersService } from 'src/users/users.service';\nimport { CreateAuthDto } from './dto/create-auth.dto';\nimport * as bcrypt from 'bcrypt';\nimport { LoginAuthDto } from './dto/login-auth.dto';\nimport { TokenPayloadDto } from './dto/token-payload.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { EmailsService } from 'src/emails/emails.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly emailsService: EmailsService,\n    private jwtService: JwtService, // private readonly emailsConfirmationService: EmailConfirmationsService, // private readonly emailsService: EmailsService, // private jwtService: JwtService,\n  ) {}\n\n  async signUp(createAuthDto: CreateAuthDto): Promise {\n    const hashedPassword = await bcrypt.hash(createAuthDto.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...createAuthDto,\n        password: hashedPassword,\n      });\n      // await this.emailsConfirmationService.sendVerificationLink(\n      //   createAuthDto.email,\n      // );\n      return createdUser;\n    } catch (error) {\n      switch (error.code) {\n        // duplicate email\n        case '23505':\n          throw new ConflictException('email already excists');\n          break;\n        default:\n          throw new InternalServerErrorException();\n          break;\n      }\n    }\n  }\n\n  async signIn(\n    loginAuthDto: LoginAuthDto,\n    ip: string,\n  ): Promise {\n    try {\n      const { email, password } = loginAuthDto;\n      const user = await this.usersService.getByEmailAndConfirm(email);\n      await this.verifyPassword(password, user.password);\n      user.password = undefined;\n      const payload: TokenPayloadDto = { email };\n      if (user.ip !== ip) {\n        await this.usersService.updateIp(email, ip);\n        const date = new Date();\n        const year = date.getUTCFullYear();\n        const month = date.getUTCMonth();\n        const day = date.getUTCDate();\n        const hour = date.getUTCHours();\n        const minutes = date.getUTCMinutes();\n        const seconds = date.getUTCSeconds();\n        const text = `Hello,\n        We detected an attempt to access your account, (matias.corvalan@aden.org), from an unrecognized IP address:\n        ------------------------------------------\n        Time: ${year}-${month}-${day}  ${hour}:${minutes}:${seconds} UTC\n        IP Address: ${ip}\n        Browser:\n        ------------------------------------------\n        If this was not an authorized login, please change your password and enable two-factor authentication on your account page at https://dash.cloudflare.com/profile.\n        If you have any questions or concerns, please contact Cloudflare support at https://support.cloudflare.com/.\n        Thanks,\n        The FinancialEmpire Team\n        `;\n        this.emailsService.sendMail({\n          to: email,\n          subject: 'Nuevo inicio de sesión',\n          text,\n        });\n      }\n      return {\n        user: user,\n        access_token: this.jwtService.sign(payload),\n      };\n    } catch (error) {\n      throw new UnauthorizedException(error.message);\n    }\n  }\n\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword,\n    );\n    if (!isPasswordMatching) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n  }\n\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.getByEmail(email);\n    if (user && user.password === pass) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n  // create(createAuthDto: CreateAuthDto) {\n  //   return 'This action adds a new auth';\n  // }\n\n  // findAll() {\n  //   return `This action returns all auth`;\n  // }\n\n  // findOne(id: number) {\n  //   return `This action returns a #${id} auth`;\n  // }\n\n  // update(id: number, updateAuthDto: UpdateAuthDto) {\n  //   return `This action updates a #${id} auth`;\n  // }\n\n  // remove(id: number) {\n  //   return `This action removes a #${id} auth`;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseInterceptors(CacheInterceptor)\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:35\n                \n            \n\n\n            \n                \n                    A method that fetches the categories from the database\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the list of categories\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  CacheInterceptor,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ApiTags, ApiBearerAuth } from '@nestjs/swagger';\nimport { CategoriesService } from './categories.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport Category from './entities/category.entity';\n\n@Controller('categories')\n@ApiTags('categories')\n@ApiBearerAuth()\nexport class CategoriesController {\n  constructor(private readonly categoriesService: CategoriesService) {}\n\n  @Post()\n  create(@Body() createCategoryDto: CreateCategoryDto) {\n    return this.categoriesService.create(createCategoryDto);\n  }\n\n  /**\n   * A method that fetches the categories from the database\n   * @returns A promise with the list of categories\n   */\n  @Get()\n  @UseInterceptors(CacheInterceptor)\n  findAll(): Promise {\n    return this.categoriesService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.categoriesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n  ) {\n    return this.categoriesService.update(+id, updateCategoryDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.categoriesService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService\n\nCategoriesService\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, Module } from '@nestjs/common';\nimport { CategoriesService } from './categories.service';\nimport { CategoriesController } from './categories.controller';\nimport Category from './entities/category.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Category]),\n    CacheModule.register({\n      ttl: 3600,\n      max: 100,\n    }),\n  ],\n  controllers: [CategoriesController],\n  providers: [CategoriesService]\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:27\n                \n            \n\n\n            \n                \n                    A method that fetches the categories from the database\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the list of categories\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:65\n                \n            \n\n\n            \n                \n                    A method that deletes a category from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a category. A category with this id should exist in the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport Category from './entities/category.entity';\n\n@Injectable()\nexport class CategoriesService {\n  /**\n   * @ignore\n   */\n  constructor(\n    @InjectRepository(Category)\n    private categoryRepository: Repository,\n  ) {}\n\n  async create(createCategoryDto: CreateCategoryDto) {\n    const newCategory = await this.categoryRepository.create(createCategoryDto);\n    await this.categoryRepository.save(newCategory);\n    return newCategory;\n  }\n  /**\n   * A method that fetches the categories from the database\n   * @returns A promise with the list of categories\n   */\n  async findAll(): Promise {\n    const posts = await this.categoryRepository.find({\n      order: { id: 'ASC' },\n      relations: ['posts'],\n    });\n    return posts;\n  }\n\n  async findOne(id: number) {\n    const post = await this.categoryRepository.findOne({\n      where: { id: id },\n      relations: ['posts'],\n    });\n    if (post) {\n      return post;\n    }\n    throw new NotFoundException(`Category with this id: ${id} does not exist`);\n  }\n\n  async update(id: number, updateCategoryDto: UpdateCategoryDto) {\n    const post = await this.categoryRepository.findOne(id, {\n      relations: ['posts'],\n    });\n    if (!post) {\n      throw new NotFoundException(\n        `Category with this id: ${id} does not exist`,\n      );\n    }\n    post.name = updateCategoryDto.name;\n\n    const updatedCategory = await this.categoryRepository.save(post);\n\n    return updatedCategory;\n  }\n  /**\n   * A method that deletes a category from the database\n   * @param id An id of a category. A category with this id should exist in the database\n   */\n  async remove(id: number) {\n    const deleteResponse = await this.categoryRepository.softDelete(id);\n    if (!deleteResponse.affected) {\n      throw new NotFoundException(\n        `Category with this id: ${id} does not exist`,\n      );\n    }\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/entities/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.categories)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import Post from 'src/posts/entities/post.entity';\nimport { Column, Entity, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\n@Entity()\nclass Category {\n  @PrimaryGeneratedColumn()\n  public id: number;\n \n  @Column()\n  public name: string;\n\n  @ManyToMany(() => Post, (post: Post) => post.categories)\n  public posts: Post[];\n}\n \nexport default Category;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmations/dto/confimEmail.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-confirmations/dto/confimEmail.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class ConfirmEmailDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\nexport default ConfirmEmailDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-auth.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-auth.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()@MinLength(8)@MaxLength(20)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Las contraseñas contendrán al menos 1 letra mayúscula, al menos 1 letra minúscula, al menos 1 número o carácter especial'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-auth.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsEmail,\n  MinLength,\n  MaxLength,\n  Matches,\n  IsNumberString,\n  IsPhoneNumber,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateAuthDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message:\n      'Las contraseñas contendrán al menos 1 letra mayúscula, al menos 1 letra minúscula, al menos 1 número o carácter especial',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/create-category.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateCategoryDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEmailConfirmationDto.html":{"url":"classes/CreateEmailConfirmationDto.html","title":"class - CreateEmailConfirmationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEmailConfirmationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmations/dto/create-email-confirmation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateEmailConfirmationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEmailDto.html":{"url":"classes/CreateEmailDto.html","title":"class - CreateEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emails/dto/create-email.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateEmailDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateHealthDto.html":{"url":"classes/CreateHealthDto.html","title":"class - CreateHealthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateHealthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/dto/create-health.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateHealthDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsArray()@ArrayNotEmpty()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArrayNotEmpty, IsArray, IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport User from 'src/users/entities/user.entity';\nexport class CreatePostDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  title: string;\n\n  @ApiProperty()\n  @IsArray()\n  @ArrayNotEmpty()\n  @IsString({ each: true })\n  paragraphs: string[];\n  \n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()@MinLength(8)@MaxLength(32)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'password is too weak'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsString,\n  IsEmail,\n  MinLength,\n  MaxLength,\n  Matches,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @MaxLength(32)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'password is too weak',\n  })\n  password: string;\n}\n\nexport default CreateUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n \n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: ['dist/**/*.entity{.ts,.js}'],\n        autoLoadEntities: true,\n        // logging: true,\n        dropSchema: false,\n        synchronize: true,\n        ssl:\n          configService.get('NODE_ENV') === 'production'\n            ? {\n                rejectUnauthorized: false,\n          ca: `MIIEQTCCAqmgAwIBAgIUVD88soxrUqyo9kd5MSG2KI2RjJMwDQYJKoZIhvcNAQEM\n              BQAwOjE4MDYGA1UEAwwvOWFhYTI0YjUtNzZjYS00MmNiLWI2NzQtYzU5NmZkZGVm\n              Y2U3IFByb2plY3QgQ0EwHhcNMjIwMjEyMTUzMjM4WhcNMzIwMjEwMTUzMjM4WjA6\n              MTgwNgYDVQQDDC85YWFhMjRiNS03NmNhLTQyY2ItYjY3NC1jNTk2ZmRkZWZjZTcg\n              UHJvamVjdCBDQTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBANOWjr7F\n              8EEp2wYLb4lYr9Ii5gH9RnaAfY91myJKkqJLOiv0HoRIrMNelGhDmFVq0N6UFa8I\n              q7cp4QGHYamVqHzcReXlG51zA+mTCa50wVyzkrVv59OlxNfQdDexVaq0d7mw4cBb\n              oaBfXJbqUoSS87rJjDJPHI9pGQGHI5UenfAo3+HD33ESL86kAUKkSLuPY3cBRasZ\n              4xG0QAZMG9LVQaMsXv9JDrajK4EeElLVkOFPPqSYUPCD7vOusTbGGEAXqmXmhngd\n              +6FCrdl46SAbjAry2OfARBg2cpj1rNnL9HcUQFf4WU6r5qwoPK0XEpVdKRTjj9V0\n              cHDW6YohL4Wa2lEHRc6rUeWX4fgkuEn/2JTQczuHUqhPSW0EvMgMKO0mbFGoo4Lh\n              41fdTnUfDJlQMlB9ciaos7kvTB/D0sZfWNce5XIu65Bh7wcEnQ7wPuFpEwd2ykGb\n              Dt+fJukdFKSNRLmaqvcU/ECC2yPnEAWdUITkvcO+GraopGu4YmF8+AQMgwIDAQAB\n              oz8wPTAdBgNVHQ4EFgQUP/CWKxc3KlOpF7VU8ztGEjZOfx0wDwYDVR0TBAgwBgEB\n              /wIBADALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQEMBQADggGBAK7RqANg6ynF444J\n              fgeSwQZrmh15YBd3e/0KEQikV/qaRmMhknznVAKsH+tA8mcrBqIC+X0SrZxQvzr8\n              yPMw3tnym1WCTJ51IWmCIXLrPhtSYigwVayV43jUCOhvZbQCGp4EyrLpCE1i3IU6\n              qT+tKwsiY9mzN2FU+CpVaqWC8mZ5SthPrlwxDL6phC9CXuuBCwHjPCFxE7wxSh8e\n              qqPM1ZNJtvG10tj8UGuKIe5B7tTtOXX998sxQ5fioDUb9cD8DMDkIoqoRCZv18jI\n              HLRlV4O0G24lljBbOxRRZZcFIdGKSIRmzn5VhjT3CflmohrAo51rGDRWnYsGZxlu\n              l6l/iJFj9Xbaa7nj90z/V5/i7/mKExAdZaxfHQYpxgzgG1/p4pPHA/BnUen/tI3O\n              /jypffQ6YBdViD2kTAOXy6XufzzwOvM/LQ2AuT9S9fsOJXyQIBV9bm8+dC8GH35I\n              yN+OxpIbVK4IYtUqWPVhfs65zueH6DwyixiIleqs77J1foIdgg==`,\n        }: false,\n      })\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Email.html":{"url":"classes/Email.html","title":"class - Email","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Email\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emails/entities/email.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Email {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailConfirmation.html":{"url":"classes/EmailConfirmation.html","title":"class - EmailConfirmation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailConfirmation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmations/entities/email-confirmation.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EmailConfirmation {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailConfirmationsController.html":{"url":"controllers/EmailConfirmationsController.html","title":"controller - EmailConfirmationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailConfirmationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmations/email-confirmations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-confirmations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                resendConfirmationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(query)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('confirm')@Public()\n                \n            \n\n            \n                \n                    Defined in src/email-confirmations/email-confirmations.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-confirmation-link')@Public()\n                \n            \n\n            \n                \n                    Defined in src/email-confirmations/email-confirmations.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { EmailConfirmationsService } from './email-confirmations.service';\nimport { GetUser } from 'src/shared/decorators/get-user.decorator';\nimport User from 'src/users/entities/user.entity';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/shared/decorators/public.decorator';\n\n@Controller('email-confirmations')\n@ApiTags('email-confirmations')\nexport class EmailConfirmationsController {\n  constructor(\n    private readonly emailConfirmationsService: EmailConfirmationsService,\n  ) {}\n\n  @Get('confirm')\n  @Public()\n  async create(@Query() query) {\n    const email = await this.emailConfirmationsService.decodeConfirmationToken(\n      query,\n    );\n    await this.emailConfirmationsService.confirmEmail(email);\n    // retornar redireccion a email ha sido confirmado\n  }\n\n  @Post('resend-confirmation-link')\n  @Public()\n  async resendConfirmationLink(@GetUser() user: User) {\n    await this.emailConfirmationsService.resendConfirmationLink(user);\n  }\n\n  // @Get()\n  // findAll() {\n  //   return this.emailConfirmationsService.findAll();\n  // }\n\n  // @Get(':id')\n  // findOne(@Param('id') id: string) {\n  //   return this.emailConfirmationsService.findOne(+id);\n  // }\n\n  // @Patch(':id')\n  // update(\n  //   @Param('id') id: string,\n  //   @Body() updateEmailConfirmationDto: UpdateEmailConfirmationDto,\n  // ) {\n  //   return this.emailConfirmationsService.update(\n  //     +id,\n  //     updateEmailConfirmationDto,\n  //   );\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.emailConfirmationsService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailConfirmationsModule.html":{"url":"modules/EmailConfirmationsModule.html","title":"module - EmailConfirmationsModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailConfirmationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailConfirmationsModule\n\n\n\ncluster_EmailConfirmationsModule_imports\n\n\n\ncluster_EmailConfirmationsModule_providers\n\n\n\n\nEmailsModule\n\nEmailsModule\n\n\n\nEmailConfirmationsModule\n\nEmailConfirmationsModule\n\nEmailConfirmationsModule -->\n\nEmailsModule->EmailConfirmationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nEmailConfirmationsModule -->\n\nUsersModule->EmailConfirmationsModule\n\n\n\n\n\nEmailConfirmationsService\n\nEmailConfirmationsService\n\nEmailConfirmationsModule -->\n\nEmailConfirmationsService->EmailConfirmationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email-confirmations/email-confirmations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailConfirmationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailConfirmationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailConfirmationsService } from './email-confirmations.service';\nimport { EmailConfirmationsController } from './email-confirmations.controller';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { EmailsModule } from 'src/emails/emails.module';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [ConfigModule, EmailsModule, JwtModule.register({}), UsersModule],\n  controllers: [EmailConfirmationsController],\n  providers: [EmailConfirmationsService]\n})\nexport class EmailConfirmationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailConfirmationsService.html":{"url":"injectables/EmailConfirmationsService.html","title":"injectable - EmailConfirmationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailConfirmationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmations/email-confirmations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                decodeConfirmationToken\n                            \n                            \n                                    Async\n                                resendConfirmationLink\n                            \n                            \n                                    Public\n                                    Async\n                                sendVerificationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, emailsService: EmailsService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/email-confirmations/email-confirmations.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailsService\n                                                  \n                                                        \n                                                                        EmailsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmations/email-confirmations.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEmailConfirmationDto: CreateEmailConfirmationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmations/email-confirmations.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEmailConfirmationDto\n                                    \n                                                CreateEmailConfirmationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        decodeConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeConfirmationToken(confirmEmailDto: ConfirmEmailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmations/email-confirmations.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmEmailDto\n                                    \n                                                ConfirmEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmations/email-confirmations.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmations/email-confirmations.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { TokenPayloadDto } from 'src/auth/dto/token-payload.dto';\nimport { EmailsService } from 'src/emails/emails.service';\nimport User from 'src/users/entities/user.entity';\nimport { UsersService } from 'src/users/users.service';\nimport ConfirmEmailDto from './dto/confimEmail.dto';\nimport { CreateEmailConfirmationDto } from './dto/create-email-confirmation.dto';\nimport { UpdateEmailConfirmationDto } from './dto/update-email-confirmation.dto';\n\n@Injectable()\nexport class EmailConfirmationsService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailsService: EmailsService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  async create(createEmailConfirmationDto: CreateEmailConfirmationDto) {\n    return 'This action adds a new emailConfirmation';\n  }\n  async decodeConfirmationToken(confirmEmailDto: ConfirmEmailDto) {\n    try {\n      const payload = await this.jwtService.verify(confirmEmailDto.token, {\n        secret: this.configService.get('JWT_SECRET'),\n      });\n      if (typeof payload === 'object' && 'email' in payload) {\n        return payload.email;\n      }\n      throw new BadRequestException();\n    } catch (error) {\n      if (error?.name === 'TokenExpiredError') {\n        throw new BadRequestException('Email confirmation token expired');\n      }\n      throw new BadRequestException('Bad confirmation token');\n    }\n  }\n  async confirmEmail(email: string) {\n    const user = await this.usersService.getByEmail(email);\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.usersService.markEmailAsConfirmed(email);\n  }\n  async resendConfirmationLink(user: User) {;\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await await this.sendVerificationLink(user.email);\n  }\n\n  public async sendVerificationLink(email: string) {\n    const payload: TokenPayloadDto = { email };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_SECRET'),\n      expiresIn: `${this.configService.get('JWT_EXPIRATION_TIME')}s`,\n    });\n    const url = `${this.configService.get(\n      'EMAIL_CONFIRMATION_URL',\n    )}?token=${token}`;\n\n    const text = `Welcome to the application. To confirm the email address, click here: ${url}`;\n\n    return await this.emailsService.sendMail({\n      to: email,\n      subject: 'Email confirmation',\n      text,\n    });\n  }\n\n  // findAll() {\n  //   return `This action returns all emailConfirmations`;\n  // }\n\n  // findOne(id: number) {\n  //   return `This action returns a #${id} emailConfirmation`;\n  // }\n\n  // update(id: number, updateEmailConfirmationDto: UpdateEmailConfirmationDto) {\n  //   return `This action updates a #${id} emailConfirmation`;\n  // }\n\n  // remove(id: number) {\n  //   return `This action removes a #${id} emailConfirmation`;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailsController.html":{"url":"controllers/EmailsController.html","title":"controller - EmailsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emails/emails.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                emails\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createEmailDto: CreateEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/emails/emails.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEmailDto\n                                    \n                                                CreateEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/emails/emails.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/emails/emails.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/emails/emails.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateEmailDto: UpdateEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/emails/emails.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEmailDto\n                                    \n                                                UpdateEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { EmailsService } from './emails.service';\nimport { CreateEmailDto } from './dto/create-email.dto';\nimport { UpdateEmailDto } from './dto/update-email.dto';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\n\n@Controller('emails')\n@ApiTags('emails')\n@ApiBearerAuth()\nexport class EmailsController {\n  constructor(private readonly emailsService: EmailsService) {}\n\n  @Post()\n  create(@Body() createEmailDto: CreateEmailDto) {\n    return this.emailsService.create(createEmailDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.emailsService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.emailsService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateEmailDto: UpdateEmailDto) {\n    return this.emailsService.update(+id, updateEmailDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.emailsService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailsModule.html":{"url":"modules/EmailsModule.html","title":"module - EmailsModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailsModule\n\n\n\ncluster_EmailsModule_exports\n\n\n\ncluster_EmailsModule_providers\n\n\n\n\nEmailsService \n\nEmailsService \n\n\n\nEmailsModule\n\nEmailsModule\n\nEmailsService  -->\n\nEmailsModule->EmailsService \n\n\n\n\n\nEmailsService\n\nEmailsService\n\nEmailsModule -->\n\nEmailsService->EmailsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emails/emails.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailsService } from './emails.service';\nimport { EmailsController } from './emails.controller';\nimport { ConfigService } from '@nestjs/config';\n\n@Module({\n  controllers: [EmailsController],\n  providers: [EmailsService, ConfigService],\n  exports: [EmailsService],\n})\nexport class EmailsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailsService.html":{"url":"injectables/EmailsService.html","title":"injectable - EmailsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emails/emails.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                sendMail\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/emails/emails.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createEmailDto: CreateEmailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emails/emails.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEmailDto\n                                    \n                                                CreateEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/emails/emails.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/emails/emails.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/emails/emails.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/emails/emails.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateEmailDto: UpdateEmailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emails/emails.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEmailDto\n                                    \n                                                UpdateEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/emails/emails.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { CreateEmailDto } from './dto/create-email.dto';\nimport { UpdateEmailDto } from './dto/update-email.dto';\nimport * as Mail from 'nodemailer/lib/mailer';\nimport { createTransport } from 'nodemailer';\n\n@Injectable()\nexport class EmailsService {\n  nodemailerTransport: Mail;\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      service: 'gmail',\n      host: 'smtp.gmail.com',\n      auth: {\n        user: this.configService.get('EMAIL_USER'),\n        pass: this.configService.get('EMAIL_PASS'),\n      }\n    });\n  }\n  create(createEmailDto: CreateEmailDto) {\n    return 'This action adds a new email';\n  }\n\n  async sendMail(options: Mail.Options) {\n    options.from = this.configService.get('EMAIL_USER');\n    return await this.nodemailerTransport.sendMail(options);\n  }\n\n  findAll() {\n    return this.nodemailerTransport.sendMail({\n      to: 'matias.corvalan24@gmail.com',\n      html: 'Hello Team! This is a test emailThanks,',\n      from: this.configService.get('EMAIL_USER'),\n      subject: 'Email confirmation',\n      text: 'This is a test email',\n    });\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} email`;\n  }\n\n  update(id: number, updateEmailDto: UpdateEmailDto) {\n    return `This action updates a #${id} email`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} email`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Health.html":{"url":"classes/Health.html","title":"class - Health","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Health\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/entities/health.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Health {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Public()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport {\n  DiskHealthIndicator,\n  HealthCheck,\n  HealthCheckService,\n  MemoryHealthIndicator,\n  TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\nimport { Public } from 'src/shared/decorators/public.decorator';\n\n@Controller('health')\n@ApiTags('health')\nexport class HealthController {\n  constructor(\n    private readonly healthService: HealthCheckService,\n    private typeOrmHealthIndicator: TypeOrmHealthIndicator,\n    private memoryHealthIndicator: MemoryHealthIndicator,\n    private diskHealthIndicator: DiskHealthIndicator,\n  ) {}\n\n  // @Post()\n  // create(@Body() createHealthDto: CreateHealthDto) {\n  //   return this.healthService.create(createHealthDto);\n  // }\n\n  @Get()\n  @Public()\n  @HealthCheck()\n  check() {\n    return this.healthService.check([\n      () => this.typeOrmHealthIndicator.pingCheck('database'),\n      // the process should not use more than 300MB memory\n      () =>\n        this.memoryHealthIndicator.checkHeap('memory heap', 300 * 1024 * 1024),\n      // The process should not have more than 300MB RSS memory allocated\n      () =>\n        this.memoryHealthIndicator.checkRSS('memory RSS', 300 * 1024 * 1024),\n      // the used disk storage should not exceed the 50% of the available space\n      // () =>\n      //   this.diskHealthIndicator.checkStorage('disk health', {\n      //     thresholdPercent: 0.5,\n      //     path: '/',\n      //   }),\n    ]);\n  }\n\n  // @Get(':id')\n  // findOne(@Param('id') id: string) {\n  //   return this.healthService.findOne(+id);\n  // }\n\n  // @Patch(':id')\n  // update(@Param('id') id: string, @Body() updateHealthDto: UpdateHealthDto) {\n  //   return this.healthService.update(+id, updateHealthDto);\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.healthService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_providers\n\n\n\n\nHealthService\n\nHealthService\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nHealthService->HealthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HealthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthService } from './health.service';\nimport { HealthController } from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n  providers: [HealthService]\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HealthService.html":{"url":"injectables/HealthService.html","title":"injectable - HealthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HealthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateHealthDto } from './dto/create-health.dto';\nimport { UpdateHealthDto } from './dto/update-health.dto';\n\n@Injectable()\nexport class HealthService {\n  // create(createHealthDto: CreateHealthDto) {\n  //   return 'This action adds a new health';\n  // }\n\n  // findAll() {\n  //   return `This action returns all health`;\n  // }\n\n  // findOne(id: number) {\n  //   return `This action returns a #${id} health`;\n  // }\n\n  // update(id: number, updateHealthDto: UpdateHealthDto) {\n  //   return `This action updates a #${id} health`;\n  // }\n\n  // remove(id: number) {\n  //   return `This action removes a #${id} health`;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwt-auth.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from 'src/shared/decorators/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayloadDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from 'src/users/users.service';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayloadDto } from '../dto/token-payload.dto';\nimport { TokenPayloadResponseDto } from '../dto/token-payload-response.dto';\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    private usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayloadDto): Promise {\n    const { email } = payload;\n    const user = await this.usersService.getByEmail(email);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return { user };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super();\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginAuthDto.html":{"url":"classes/LoginAuthDto.html","title":"class - LoginAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-auth.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()@MinLength(8)@MaxLength(20)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Las contraseñas contendrán al menos 1 letra mayúscula, al menos 1 letra minúscula, al menos 1 número o carácter especial'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-auth.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsString,\n  IsEmail,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class LoginAuthDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message:\n      'Las contraseñas contendrán al menos 1 letra mayúscula, al menos 1 letra minúscula, al menos 1 número o carácter especial',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/utilities/paginationParams.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                startId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/utilities/paginationParams.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/utilities/paginationParams.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/utilities/paginationParams.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, Min, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class PaginationParams {\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  offset?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/pipes/parse-int.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  Injectable,\n  PipeTransform,\n  BadRequestException,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException(`Validation failed. \"${val}\".`);\n    }\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entities/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                categories\n                            \n                            \n                                createdAt\n                            \n                            \n                                    Public\n                                deletedAt\n                            \n                            \n                                    Public\n                                    Optional\n                                id\n                            \n                            \n                                    Public\n                                paragraphs\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, author => author.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, category => category.posts)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import Category from 'src/categories/entities/category.entity';\nimport User from 'src/users/entities/user.entity';\nimport {\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  UpdateDateColumn,\n  Entity,\n  ManyToOne,\n  DeleteDateColumn,\n  JoinTable,\n  ManyToMany,\n} from 'typeorm';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  public id?: number;\n\n  @Column()\n  public title: string;\n\n  @Column('text', { array: true })\n  public paragraphs: string[];\n\n  @DeleteDateColumn()\n  public deletedAt: Date;\n\n  @CreateDateColumn({ type: 'timestamp', name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ type: 'timestamp', name: 'updated_at' })\n  updatedAt: Date;\n \n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User;\n\n  @ManyToMany(() => Category, (category: Category) => category.posts)\n  @JoinTable()\n  public categories: Category[];\n}\nexport default Post;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user, createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPostDto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(search: string, undefined: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    search\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updatePostDto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePostDto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { PaginationParams } from 'src/shared/utilities/paginationParams';\nimport { GetUser } from 'src/shared/decorators/get-user.decorator';\n\n@Controller('posts')\n@ApiTags('posts')\n@ApiBearerAuth()\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Post()\n  create(@GetUser() user, @Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto, user);\n  }\n\n  @Get()\n  findAll(\n    @Query('search') search: string,\n    @Query() { offset, limit }: PaginationParams,\n  ) {\n    if (search) {\n      return this.postsService.searchForPosts(search);\n    } else {\n      return this.postsService.findAll(offset, limit);\n    }\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.postsService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updatePostDto: UpdatePostDto) {\n    return this.postsService.update(+id, updatePostDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.postsService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsService\n\nPostsService\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './entities/post.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post])],\n  controllers: [PostsController],\n  providers: [PostsService]\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                searchForPosts\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createPostDto: CreatePostDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPostDto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(offset: number, limit: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchForPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchForPosts(text: string, offset?: number, limit?: number, startId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updatePostDto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePostDto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport User from 'src/users/entities/user.entity';\nimport { In, Repository } from 'typeorm';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { Post } from './entities/post.entity';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectRepository(Post)\n    private postRepository: Repository,\n  ) {}\n\n  async create(createPostDto: CreatePostDto, user: User) {\n    createPostDto.author = user;\n    const newPost = await this.postRepository.create(createPostDto);\n    await this.postRepository.save(newPost);\n    return newPost;\n  }\n\n  async findAll(offset = 0, limit = 10) {\n    const posts = await this.postRepository.find({\n      order: { id: 'ASC' },\n      relations: ['author'],\n      skip: offset,\n      take: limit,\n    });\n    return posts;\n  }\n\n  async searchForPosts(\n    text: string,\n    offset?: number,\n    limit?: number,\n    startId?: number,\n  ) {\n    const [items, count] = await this.postRepository.findAndCount({\n      order: { id: 'ASC' },\n      // where: { title: `%${text}%` },\n      where: `(title like '%${text}%')`,\n      relations: ['author'],\n      skip: offset,\n      take: limit,\n    });\n    return {\n      items: items,\n      count,\n    };\n  }\n\n  async findOne(id: number) {\n    const post = await this.postRepository.findOne({\n      where: { id: id },\n      relations: ['author'],\n    });\n    if (post) {\n      return post;\n    }\n    throw new NotFoundException(`Post with this id: ${id} does not exist`);\n  }\n\n  async update(id: number, updatePostDto: UpdatePostDto) {\n    const post = await this.postRepository.findOne(id);\n    if (!post) {\n      throw new NotFoundException(`Post with this id: ${id} does not exist`);\n    }\n    post.title = updatePostDto.title;\n    post.paragraphs = updatePostDto.paragraphs;\n\n    const updatedPost = await this.postRepository.save(post);\n\n    return updatedPost;\n  }\n\n  async remove(id: number) {\n    const deleteResponse = await this.postRepository.softDelete(id);\n    if (!deleteResponse.affected) {\n      throw new NotFoundException(`Post with this id: ${id} does not exist`);\n    }\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ToBooleanPipe.html":{"url":"injectables/ToBooleanPipe.html","title":"injectable - ToBooleanPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ToBooleanPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/pipes/to-boolean.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/pipes/to-boolean.pipe.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ArgumentMetadata, Injectable, PipeTransform } from '@nestjs/common';\n\n@Injectable()\nexport class ToBooleanPipe implements PipeTransform {\n  transform(value: any, { type, metatype }: ArgumentMetadata) {\n    if (type === 'query' && metatype === Boolean) {\n      return value ? value === 'true' : null;\n    }\n\n    return value;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenPayloadDto.html":{"url":"classes/TokenPayloadDto.html","title":"class - TokenPayloadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenPayloadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-payload.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-payload.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenPayloadDto {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenPayloadResponseDto.html":{"url":"classes/TokenPayloadResponseDto.html","title":"class - TokenPayloadResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenPayloadResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-payload-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-payload-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import User from 'src/users/entities/user.entity';\n\nexport class TokenPayloadResponseDto {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAuthDto.html":{"url":"classes/UpdateAuthDto.html","title":"class - UpdateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-auth.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateAuthDto } from './create-auth.dto';\n\nexport class UpdateAuthDto extends PartialType(CreateAuthDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/update-category.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateCategoryDto } from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEmailConfirmationDto.html":{"url":"classes/UpdateEmailConfirmationDto.html","title":"class - UpdateEmailConfirmationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEmailConfirmationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmations/dto/update-email-confirmation.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateEmailConfirmationDto } from './create-email-confirmation.dto';\n\nexport class UpdateEmailConfirmationDto extends PartialType(CreateEmailConfirmationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEmailDto.html":{"url":"classes/UpdateEmailDto.html","title":"class - UpdateEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emails/dto/update-email.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateEmailDto } from './create-email.dto';\n\nexport class UpdateEmailDto extends PartialType(CreateEmailDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateHealthDto.html":{"url":"classes/UpdateHealthDto.html","title":"class - UpdateHealthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateHealthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/dto/update-health.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateHealthDto } from './create-health.dto';\n\nexport class UpdateHealthDto extends PartialType(CreateHealthDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/update-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsArray()@ArrayNotEmpty()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/update-post.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/update-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreatePostDto } from './create-post.dto';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, IsArray, ArrayNotEmpty } from 'class-validator';\n\nexport class UpdatePostDto extends PartialType(CreatePostDto) {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  title: string;\n\n  @ApiProperty()\n  @IsArray()\n  @ArrayNotEmpty()\n  @IsString({ each: true })\n  paragraphs: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumberString } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumberString()\n  phone: string;\n}\nexport default UpdateUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                    Optional\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                ip\n                            \n                            \n                                    Public\n                                isEmailConfirmed\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                phone\n                            \n                            \n                                    Public\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        ip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isEmailConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport Post from 'src/posts/entities/post.entity';\n\n@Entity()\nclass User {\n  @PrimaryGeneratedColumn()\n  public id?: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column()\n  public name: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public password?: string;\n\n  @Column({ nullable: true })\n  public phone?: string;\n\n  @Column({ nullable: true })\n  public ip?: string;\n\n  //   @OneToMany(() => Post, (post: Post) => post.author)\n  //   public posts?: Post[];\n\n  //   @Column({ nullable: true })\n  //   public avatarId?: number;\n\n  //   @Column({\n  //     nullable: true\n  //   })\n  //   @Exclude()\n  //   public currentHashedRefreshToken?: string;\n\n  @Column({ default: false })\n  public isEmailConfirmed: boolean;\n\n  @OneToMany(() => Post, (post: Post) => post.author)\n  public posts: Post[];\n}\n\nexport default User;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('users')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport User from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getByEmailAndConfirm\n                            \n                            \n                                    Async\n                                markEmailAsConfirmed\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateIp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmailAndConfirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmailAndConfirm(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markEmailAsConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    markEmailAsConfirmed(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateIp\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateIp(email: string, ip: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ip\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport User from './entities/user.entity';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n\n  async create(createUserDto: CreateUserDto) {\n    const newUser = await this.userRepository.create(createUserDto);\n    await this.userRepository.save(newUser);\n    return newUser;\n  }\n\n  async findAll() {\n    const users = await this.userRepository.find({\n      order: { id: 'ASC' },\n    });\n    return users;\n  }\n\n  async findOne(id: number) {\n    const user = await this.userRepository.findOne({ id });\n    if (user) {\n      return user;\n    }\n    throw new NotFoundException(`User with this id: ${id} does not exist`);\n  }\n\n  async update(id: number, updateUserDto: UpdateUserDto) {\n    const user = await this.userRepository.findOne(id);\n    if (!user) {\n      throw new NotFoundException(`User with this id: ${id} does not exist`);\n    }\n    user.email = updateUserDto.email;\n    user.phone = updateUserDto.phone;\n    user.name = updateUserDto.name;\n    if (updateUserDto.password) {\n      const hashedPassword = await bcrypt.hash(updateUserDto.password, 10);\n      user.password = hashedPassword;\n    }\n\n    const updatedUser = await this.userRepository.save(user);\n\n    return updatedUser;\n  }\n\n  async remove(id: number) {\n    const deleteResponse = await this.userRepository.softDelete(id);\n    if (!deleteResponse.affected) {\n      throw new NotFoundException(`User with this id: ${id} does not exist`);\n    }\n    return;\n  }\n  async getByEmail(email: string) {\n    const user = await this.userRepository.findOne({\n      where: { email },\n    });\n    if (user) {\n      return user;\n    }\n    throw new NotFoundException(`User with this email:${email} does not exist`);\n  }\n  async getByEmailAndConfirm(email: string) {\n    const user = await this.userRepository.findOne({\n      where: { email, isEmailConfirmed: true },\n    });\n    if (user) {\n      return user;\n    }\n    throw new NotFoundException(`User with this email:${email} does not exist`);\n  }\n\n  async updateIp(email: string, ip: string) {\n    return this.userRepository.update(\n      { email },\n      {\n        ip: ip,\n      },\n    );\n  }\n  \n  async markEmailAsConfirmed(email: string) {\n    return this.userRepository.update(\n      { email },\n      {\n        isEmailConfirmed: true,\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/dto/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/login-auth.dto.ts\n            \n            class\n            LoginAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/token-payload-response.dto.ts\n            \n            class\n            TokenPayloadResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/token-payload.dto.ts\n            \n            class\n            TokenPayloadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/update-auth.dto.ts\n            \n            class\n            UpdateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                src/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/categories/entities/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/email-confirmations/dto/confimEmail.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-confirmations/dto/create-email-confirmation.dto.ts\n            \n            class\n            CreateEmailConfirmationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/email-confirmations/dto/update-email-confirmation.dto.ts\n            \n            class\n            UpdateEmailConfirmationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/email-confirmations/email-confirmations.controller.ts\n            \n            controller\n            EmailConfirmationsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email-confirmations/email-confirmations.service.ts\n            \n            injectable\n            EmailConfirmationsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/email-confirmations/entities/email-confirmation.entity.ts\n            \n            class\n            EmailConfirmation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/emails/dto/create-email.dto.ts\n            \n            class\n            CreateEmailDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/emails/dto/update-email.dto.ts\n            \n            class\n            UpdateEmailDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/emails/emails.controller.ts\n            \n            controller\n            EmailsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/emails/emails.service.ts\n            \n            injectable\n            EmailsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/emails/entities/email.entity.ts\n            \n            class\n            Email\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/dto/create-health.dto.ts\n            \n            class\n            CreateHealthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/dto/update-health.dto.ts\n            \n            class\n            UpdateHealthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/entities/health.entity.ts\n            \n            class\n            Health\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/health/health.service.ts\n            \n            injectable\n            HealthService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/shared/decorators/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/pipes/to-boolean.pipe.ts\n            \n            injectable\n            ToBooleanPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/utilities/paginationParams.ts\n            \n            class\n            PaginationParams\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/cli : ^8.0.0\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/schematics : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/terminus : ^8.0.6\n        \n            @nestjs/testing : ^8.0.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/hapi__joi : ^17.1.8\n        \n            @types/passport-jwt : ^3.0.6\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^3.6.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            helmet : ^5.0.2\n        \n            nestjs-real-ip : ^2.1.0\n        \n            nodemailer : ^6.7.3\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.45\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/entities/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : Admin\n                            \n                        \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : User\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailConfirmationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_EmailConfirmationsModule\n\n\n\ncluster_EmailConfirmationsModule_providers\n\n\n\ncluster_EmailsModule\n\n\n\ncluster_EmailsModule_exports\n\n\n\ncluster_EmailsModule_providers\n\n\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationsModule\n\nEmailConfirmationsModule\n\nAppModule -->\n\nEmailConfirmationsModule->AppModule\n\n\n\n\n\nEmailsModule\n\nEmailsModule\n\nAuthModule -->\n\nEmailsModule->AuthModule\n\n\n\nEmailConfirmationsModule -->\n\nEmailsModule->EmailConfirmationsModule\n\n\n\nAppModule -->\n\nEmailsModule->AppModule\n\n\n\n\n\nEmailsService \n\nEmailsService \n\nEmailsService  -->\n\nEmailsModule->EmailsService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nEmailConfirmationsModule -->\n\nUsersModule->EmailConfirmationsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nEmailConfirmationsService\n\nEmailConfirmationsService\n\nEmailConfirmationsModule -->\n\nEmailConfirmationsService->EmailConfirmationsModule\n\n\n\n\n\nEmailsService\n\nEmailsService\n\nEmailsModule -->\n\nEmailsService->EmailsModule\n\n\n\n\n\nHealthService\n\nHealthService\n\nHealthModule -->\n\nHealthService->HealthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    23 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/decorators/get-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): User => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/shared/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/shared/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: UserRole[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
